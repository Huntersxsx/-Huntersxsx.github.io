<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Rasa_bot_demo1</title>
      <link href="/2018/12/30/Rasa-bot-demo1/"/>
      <url>/2018/12/30/Rasa-bot-demo1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font face="楷体">前言</font></h2><p>&emsp;&emsp;&ensp;浪了差不多半年时间，最近终于来到上海，开始着手做毕业设计了，笔者的毕设题目是“基于Rasa框架的任务型人机对话系统”，是一个与NLP相关的企业项目。当然，我的毕业设计肯定没有题目看起来的那么高端，因为已经有了框架，我只要学会如何使用就OK了，至于框架中涉及的各种复杂难解的配置以及算法，目前我只需把它们当成“黑匣子”，等知识储备够了再去钻研也不迟。<br>&emsp;&emsp;&ensp;但是……我的老板似乎忘记了我是啥也不会的大四实习生，二话不说就把Rasa的官方文档甩给我让我去看明白🌚，于是我一脸懵逼地看了一个多星期，还是有一大堆内容没看懂，他才算了解我的真实水平，让我边看边做慢慢熟悉……于是我就完成了我的第一个简单的小<a href="https://github.com/Huntersxsx/FastFoodOrder_demo1" target="_blank" rel="noopener">demo</a>。<br>&emsp;&emsp;&ensp;虽然说着<a href="https://rasa.com/docs/" target="_blank" rel="noopener">官方文档</a>写的晦涩难懂（其实是我啥也不会，所以才看不懂😂），但是还是很有必要仔细过一遍。Rasa的官方文档主要包含了<a href="https://rasa.com/docs/nlu/" target="_blank" rel="noopener">NLU</a>和<a href="https://rasa.com/docs/core/" target="_blank" rel="noopener">Core</a>两部分，里面包含了很多内容，比如NLU中讲述了如何配置相关组件，完成Intent Classification和Entity Extraction，而Core主要讲述了如何利用Policy选择相应的Action，使得bot做出期望的response。对相关名词不太熟悉？没关系，看看这四篇介绍性博客（<a href="https://blog.csdn.net/qq_40027052/article/details/78723576" target="_blank" rel="noopener">1</a>、<a href="http://www.qianjia.com/html/2018-01/23_283253.html" target="_blank" rel="noopener">2</a>、<a href="https://zhuanlan.zhihu.com/p/38070033" target="_blank" rel="noopener">3</a>、<a href="https://zhuanlan.zhihu.com/p/38073496" target="_blank" rel="noopener">4</a>），会对你理解任务型机器人有很大的帮助。如果看完这些博客你已经对任务型机器人有了大概的了解，那么你便可以仔细阅读Rasa提供的官方文档了。除此之外，<a href="https://github.com/rasaHQ/" target="_blank" rel="noopener">Rasa的Github</a>里的内容也很丰富，你完全可以根据<a href="https://github.com/RasaHQ/starter-pack-rasa-stack" target="_blank" rel="noopener">Rasa Stack starter-pack</a>里的步骤一步到位安装好Rasa框架，而不需要根据官方文档所介绍的一步步安装rasa nlu和rasa core。</p><h2 id="Demo-Fast-Food-Order"><a href="#Demo-Fast-Food-Order" class="headerlink" title="Demo: Fast Food Order"></a><font face="楷体">Demo: Fast Food Order</font></h2><p>&emsp;&emsp;&ensp;如果你把官方文档大致过了一遍的话，应该就能很轻松地明白我的小<a href="https://github.com/Huntersxsx/FastFoodOrder_demo1" target="_blank" rel="noopener">demo</a>。我的demo主要完成的就是快餐店点餐时顾客和营业员的简单交流，由于才学了Rasa没多久，所以对话做的简单并且不是很流畅，也没有考虑到<a href="https://rasa.com/docs/core/slotfilling/#handling-unhappy-paths" target="_blank" rel="noopener">“unhappy path”</a>的情况。以下就是我的demo完成的对话效果：</p><center><img src="/2018/12/30/Rasa-bot-demo1/NO.1.jpg" width="400" hegiht="500"></center>这是[Interactive Training](https://rasa.com/docs/core/interactive_learning/)之后的结果。可以看出，bot充当了营业员的角色，询问user的点餐需求，然后计算需要支付的金额。不清楚的话就再看一下直接运行的结果吧：<center><img src="/2018/12/30/Rasa-bot-demo1/NO.4.png" width="700" hegiht="500"></center>如果还是不清楚，那就建议使用[debug模式](https://rasa.com/docs/core/debugging/#debugging)，这样就可以看清每一步bot接收到哪些信息，又会做出如何的反应。知道了实现效果之后，再来看我的[demo](https://github.com/Huntersxsx/FastFoodOrder_demo1)中包含了哪些文件。### <font face="楷体">run.py</font>&emsp;&emsp;&ensp;这个文件中需要关注的是注释的部分，其余忽略即可<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练NLU：  python -m rasa_nlu.train -c nlu_config_tf.yml --data data/nlu_data/ -o models --fixed_model_name nlu --project current --verbose</span></span><br><span class="line"><span class="comment">#训练Core： python -m rasa_core.train -d domain.yml -s data/stories_order.md -o models/dialogue</span></span><br><span class="line"><span class="comment">#运行对话： python -m rasa_core.run -d models/dialogue -u models/current/nlu</span></span><br><span class="line"><span class="comment">#自定义Action： python -m rasa_core_sdk.endpoint --actions actions</span></span><br><span class="line"><span class="comment">#加上endpoint后运行对话： python -m rasa_core.run -d models/dialogue -u models/current/nlu --endpoints endpoints.yml</span></span><br><span class="line"><span class="comment">#interative training： python -m rasa_core.train interactive -o models/dialogue -d domain.yml -s data/stories_order.md --nlu models/current/nlu --endpoints endpoints.yml</span></span><br><span class="line"><span class="comment">#旧版本interative training： python -m rasa_core.train online -o models/dialogue -d domain.yml -s data/stories_order.md --nlu models/current/nlu --endpoints endpoints.yml</span></span><br><span class="line"><span class="comment"># Debug模式： python -m rasa_core.run -d models/dialogue -u models/current/nlu --endpoints endpoints.yml --debug</span></span><br><span class="line"><span class="comment">#可视化流程(新版本有)： localhost:5005/visualization.html</span></span><br></pre></td></tr></table></figure>这些是训练、运行等操作的命令行语句，以及查看interactive trainning中的可视化流程图的网址。需要注意的是各个文件如果存放的位置发生变化，则需要做相应的修改。&emsp;&emsp;&ensp;首先，应该先训练NLU，生成models/current/nlu/文件夹下的内容，接着再执行训练Core的语句，生成models/dialogue/，如果没有自定义的action的话，就可以直接运行对话了，否则，需要先运行<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m rasa_core_sdk<span class="selector-class">.endpoint</span> --actions actions</span><br></pre></td></tr></table></figure>然后再另开一个窗口，运行<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m rasa_core.<span class="built_in">run</span> -d models/dialogue -u models/current/nlu <span class="comment">--endpoints endpoints.yml</span></span><br></pre></td></tr></table></figure>如果在后面加上--debug，则就进入了debug模式，在debug模式中可以清楚看出每一步bot提取的信息，帮助用户更加清楚core执行的过程，所以在开始用或者出错时强烈推荐使用[Debug](https://rasa.com/docs/core/debugging/)。运行最后一个命令则可以在interactive trainning模式中随时查看bot的response过程，如下图，帮助更好地理解。<center><img src="/2018/12/30/Rasa-bot-demo1/NO.2.png" width="400" hegiht="800"></center><h3 id="jieba-test-py"><a href="#jieba-test-py" class="headerlink" title="jieba_test.py"></a><font face="楷体">jieba_test.py</font></h3><p>&emsp;&emsp;&ensp;这个python文件就是用来测试jieba分词的效果的，如果对分词效果不满意，则可以把想要分开的词添加到data\dict\dict_jieba.txt中，然后在nlu_config_tf.yml中标明dictionary_path路径。</p><h3 id="nlu-config-tf-yml"><a href="#nlu-config-tf-yml" class="headerlink" title="nlu_config_tf.yml"></a><font face="楷体">nlu_config_tf.yml</font></h3><p>&emsp;&emsp;&ensp;这是nlu模块的配置文件，详细内容请仔细阅读<a href="https://rasa.com/docs/nlu/components/#id3" target="_blank" rel="noopener">官方文档的Component Configuration</a>。<br>&emsp;&emsp;&ensp;先看我这个demo中的nlu_config_tf.yml文件内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">language</span>: "zh"</span><br><span class="line"></span><br><span class="line"><span class="attribute">pipeline:</span></span><br><span class="line">- name: "tokenizer_jieba"</span><br><span class="line">  <span class="attribute">dictionary_path</span>: "./data/dict"</span><br><span class="line">- name: "intent_entity_featurizer_regex"</span><br><span class="line">- name: "ner_crf"</span><br><span class="line">- name: "ner_synonyms"</span><br><span class="line">- name: "intent_featurizer_count_vectors"</span><br><span class="line">  "token_pattern": '(?u)\b\w+\b'    #\b:匹配一个单词边界,\w:匹配字母数字,+:匹配一个或多个</span><br><span class="line">- name: "intent_classifier_tensorflow_embedding"</span><br></pre></td></tr></table></figure><p>表明对话是用中文进行的，采用的是<a href="https://rasa.com/docs/nlu/components/#tokenizer-jieba" target="_blank" rel="noopener">jieba分词</a>，接下来用<a href="https://rasa.com/docs/nlu/components/#intent-entity-featurizer-regex" target="_blank" rel="noopener">intent_entity_featurizer_regex</a>创建正则表达式列表，来简化意图分类、实体提取，接着<a href="https://rasa.com/docs/nlu/components/#ner-crf" target="_blank" rel="noopener">ner_crf</a>是用来标记实体的，而<a href="https://rasa.com/docs/nlu/components/#ner-synonyms" target="_blank" rel="noopener">ner_synonyms</a>则用来处理同义词，然后<a href="https://rasa.com/docs/nlu/components/#intent-featurizer-count-vectors" target="_blank" rel="noopener">intent_featurizer_count_vectors</a>创建意图分类的词包，作为分类器<a href="https://rasa.com/docs/nlu/components/#intent-classifier-tensorflow-embedding" target="_blank" rel="noopener">intent_classifier_tensorflow_embedding</a>的输入，其中，”token_pattern”: ‘(?u)\b\w+\b’ 是指匹配分次后的一个或多个字母或数字。<br>&emsp;&emsp;&ensp;这些组件就够成了我这个demo的pipeline，注意组件的顺序不能随意变动。</p><h3 id="nlu-order-md"><a href="#nlu-order-md" class="headerlink" title="nlu_order.md"></a><font face="楷体">nlu_order.md</font></h3><p>&emsp;&emsp;&ensp;这是训练数据，关于训练数据的格式可以参考官方文档的<a href="https://rasa.com/docs/nlu/dataformat/#markdown-format" target="_blank" rel="noopener">这一部分</a>。我的nlu_order.md文件中包含了我给各个intent写的多个话术，并且有的话术还包含了entity，这些话术用来和用户输入的语句进行比较，然后将用户输入的语句分类到相应的intent中，从而完成意图分类。这文件中还包含了synonym，可以将提取出的实体都替换成同一个同义词。</p><h3 id="domain-yml"><a href="#domain-yml" class="headerlink" title="domain.yml"></a><font face="楷体">domain.yml</font></h3><p>&emsp;&emsp;&ensp;domain文件中包含了intents、entities、slots、actions、templates，有关domain文件的格式可以参考官方文档的<a href="https://rasa.com/docs/core/domains/#domain-format" target="_blank" rel="noopener">这一部分</a>。</p><h3 id="stories-order-md"><a href="#stories-order-md" class="headerlink" title="stories_order.md"></a><font face="楷体">stories_order.md</font></h3><p>&emsp;&emsp;&ensp;这就是我写的几个简单的小故事，bot就是根据这个故事线走下去的。看完<a href="https://rasa.com/docs/core/stories/#story-data-format" target="_blank" rel="noopener">story的格式</a>之后，你应该就会很容易读懂我写的故事。</p><h3 id="actions-py"><a href="#actions-py" class="headerlink" title="actions.py"></a><font face="楷体">actions.py</font></h3><p>&emsp;&emsp;&ensp;这是在自定义action时需要编写的文件，我这里实现的就是计算订单金额的简单功能。在自定义action时，首先需要创建endpoints.yml文件，该文件里的内容可以参考官方文档的<a href="https://rasa.com/docs/core/customactions/#custom-actions" target="_blank" rel="noopener">这一部分</a>，至于自定义action类的格式，可以参照<a href="https://rasa.com/docs/core/customactions/#custom-actions-written-in-python" target="_blank" rel="noopener">这一部分</a>。如果你对我编写的action还有疑问，可以看看<a href="https://rasa.com/docs/core/customactions/#action-request-format" target="_blank" rel="noopener">这里</a>tracker部分包含的内容。由于在action中是不能直接用print输出语句的，所以要想查看每一步的中间输出结果，可以用dispatcher.utter_message()语句，相关介绍在<a href="https://rasa.com/docs/core/api/dispatcher/#dispatcher" target="_blank" rel="noopener">这里</a>。</p><h3 id="parse-nlu-data-py"><a href="#parse-nlu-data-py" class="headerlink" title="parse_nlu_data.py"></a><font face="楷体">parse_nlu_data.py</font></h3><p>&emsp;&emsp;&ensp;这个python文件主要是对nlu的训练数据文档进行一系列的处理，然后用户可以再自己写一些格式相同的话术作为测试集进行测试，只需要把data_dir的值改成测试数据的文件路径即可。最后运行会生成一个Excel文档，包含了测试集的用户输入语句、原始的意图、预测的意图、预测的信心值、预测是否准确、原始提取出的实体信息、预测出的实体信息，如下图所示:</p><p><center><img src="/2018/12/30/Rasa-bot-demo1/NO.3.png" width="700" hegiht="400"></center><br>这一部分本质上与对话系统的关系不大，只是用来观察分类的准确性，但其实这个程序也不复杂，我也加了详细的注释，主要涉及的是正则表达式等基本的python操作，感兴趣的小伙伴可以自己看一看。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font face="楷体">后记</font></h2><p>&emsp;&emsp;&ensp;目前，我的毕设工作已经展开了，2018年也来到了尾声，可能我还没有做好迎接新的一年的准备，或许是时候该慢慢收心了，愿自己能够在2019年里踏实科研、学有所成。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Aircraft Battle</title>
      <link href="/2018/12/17/Aircraft-Battle/"/>
      <url>/2018/12/17/Aircraft-Battle/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;&ensp;浪了好久……🌚也该收收心了，今天在Github上看到一个用Python编写的<a href="https://github.com/Kill-Console/PythonShootGame" target="_blank" rel="noopener"><font color="green">打飞机的小游戏</font></a>，感觉还不错，而且也不长，就花了点时间给大神的代码加了点<a href="https://github.com/Huntersxsx/PythonShootGame" target="_blank" rel="noopener"><font color="green">注释</font></a>，更加适合Python的新手阅读。<br>&emsp;&emsp;&ensp;Python是一种解释型语言，而且非常适合面向对象编程，所以用Python编写小游戏上手较快，也相对简单，类似这篇文章介绍的用Python编写的小游戏还有很多，比如Github上这个<a href=""><font color="green">free-python-games</font></a>，就包含了贪吃蛇、flappy bird等十多款小游戏，有兴趣的同学可以看看、玩玩。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>some easy algorithm03</title>
      <link href="/2018/11/25/some-easy-algorithm03/"/>
      <url>/2018/11/25/some-easy-algorithm03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font face="楷体">前言</font></h2><p>&emsp;&emsp;&ensp;趁热打铁又做了2019年的网易校招题，结果发现要比2018年的简单不少，题量也从12道降低到7道，而且没有一道动态规划，所以做的比较快，但也还是收获了一些。</p><h2 id="2019网易校招题"><a href="#2019网易校招题" class="headerlink" title="2019网易校招题"></a><font face="楷体">2019网易校招题</font></h2><h4 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a><strong>NO.1</strong></h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易有一个古老的游戏机，上面有着经典的游戏俄罗斯方块。因为它比较古老，所以规则和一般的俄罗斯方块不同。荧幕上一共有 n 列，每次都会有一个 1 x 1 的方块随机落下，在同一列中，后落下的方块会叠在先前的方块之上，当一整行方块都被占满时，这一行会被消去，并得到1分。<br>&emsp;&emsp;&ensp;有一天，小易又开了一局游戏，当玩到第 m 个方块落下时他觉得太无聊就关掉了，小易希望你告诉他这局游戏他获得的分数。</p><h5 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h5><p>输入描述:<br>第一行两个数 n, m<br>第二行 m 个数，c1, c2, … , cm ， ci 表示第 i 个方块落在第几列<br>其中 1 &lt;= n, m &lt;= 1000, 1 &lt;= ci &lt;= n<br>输出描述:<br>小易这局游戏获得的分数<br>输入例子1:<br>3 9<br>1 1 2 2 2 3 1 2 3<br>输出例子1:<br>2</p><h5 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找出所有列中最低的那个即可</span></span><br><span class="line">print(<span class="string">"请输入屏幕的列数n和下落的方块数m:"</span>)</span><br><span class="line">[n,m] = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">print(<span class="string">"请输入这m个方块下落的列序号:"</span>)</span><br><span class="line">L = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">num_count = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    num_count.append(L.count(i))</span><br><span class="line">print(<span class="string">"得分为:"</span>,min(num_count))</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/25/some-easy-algorithm03/NO.1.png" width="250" hegiht="120"></p><h4 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a><strong>NO.2</strong></h4><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易觉得高数课太无聊了，决定睡觉。不过他对课上的一些内容挺感兴趣，所以希望你在老师讲到有趣的部分的时候叫醒他一下。<br>&emsp;&emsp;&ensp;你知道了小易对一堂课每分钟知识点的感兴趣程度，并以分数量化，以及他在这堂课上每分钟是否会睡着，你可以叫醒他一次，这会使得他在接下来的k分钟内保持清醒。<br>&emsp;&emsp;&ensp;你需要选择一种方案最大化小易这堂课听到的知识点分值。</p><h5 id="样例：-1"><a href="#样例：-1" class="headerlink" title="样例："></a>样例：</h5><p>输入描述:<br>第一行 n, k (1 &lt;= n, k &lt;= 105) ，表示这堂课持续多少分钟，以及叫醒小易一次使他能够保持清醒的时间。<br>第二行 n 个数，a1, a2, … , an(1 &lt;= ai &lt;= 104) 表示小易对每分钟知识点的感兴趣评分。<br>第三行 n 个数，t1, t2, … , tn 表示每分钟小易是否清醒, 1表示清醒。<br>输出描述:<br>小易这堂课听到的知识点的最大兴趣值。<br>输入例子1:<br>6 3<br>1 3 5 2 5 4<br>1 1 0 1 0 0<br>输出例子1:<br>16</p><h5 id="源程序-1"><a href="#源程序-1" class="headerlink" title="源程序"></a>源程序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#思路很明确，不过好像超时了……</span></span><br><span class="line">print(<span class="string">"请输入这节课的时长n，以及保持清醒的时长k:"</span>)</span><br><span class="line">[n,k] = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">print(<span class="string">"请输入对每分钟知识点的感兴趣评分:"</span>)</span><br><span class="line">interest = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">print(<span class="string">"请输入每分钟是否会清醒:"</span>)</span><br><span class="line">is_wakeup = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n-k+<span class="number">1</span>):</span><br><span class="line">    temp = is_wakeup.copy()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i,i + k):</span><br><span class="line">        temp[j] = <span class="number">1</span></span><br><span class="line">    L = [interest[x] * temp[x] <span class="keyword">for</span> x <span class="keyword">in</span> range(n)]</span><br><span class="line">    result.append(sum(L))</span><br><span class="line">print(<span class="string">"这节课获得的最大知识点数值为:"</span>,max(result))</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/25/some-easy-algorithm03/NO.2.png" width="300" hegiht="120"></p><h4 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a><strong>NO.3</strong></h4><h5 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;又到了丰收的季节，恰逢小易去牛牛的果园里游玩。牛牛常说他对整个果园的每个地方都了如指掌，小易不太相信，所以他想考考牛牛。<br>&emsp;&emsp;&ensp;在果园里有N堆苹果，每堆苹果的数量为ai，小易希望知道从左往右数第x个苹果是属于哪一堆的。<br>牛牛觉得这个问题太简单，所以希望你来替他回答。</p><h5 id="样例：-2"><a href="#样例：-2" class="headerlink" title="样例："></a>样例：</h5><p>输入描述:<br>第一行一个数n(1 &lt;= n &lt;= 105)。<br>第二行n个数ai(1 &lt;= ai &lt;= 1000)，表示从左往右数第i堆有多少苹果。<br>第三行一个数m(1 &lt;= m &lt;= 105)，表示有m次询问。<br>第四行m个数qi，表示小易希望知道第qi个苹果属于哪一堆。<br>输出描述:<br>m行，第i行输出第qi个苹果属于哪一堆。<br>输入例子:<br>5<br>2 7 3 4 9<br>3<br>1 25 11<br>输出例子:<br>1<br>5<br>3</p><h5 id="源程序-2"><a href="#源程序-2" class="headerlink" title="源程序"></a>源程序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#也很简单，不过这种直接遍历比较的方法有超时了……</span></span><br><span class="line">n = int(input(<span class="string">"请输入苹果的堆数:"</span>))</span><br><span class="line">print(<span class="string">"请输从左往右入每一堆的苹果数目:"</span>)</span><br><span class="line">A = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">m = int(input(<span class="string">"请输入询问次数:"</span>))</span><br><span class="line">print(<span class="string">"请输m个查询的索引值:"</span>)</span><br><span class="line">Q = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">    A[i] += A[i<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> Q[i] &lt;= A[j]:</span><br><span class="line">            print(j+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#由于上述方法超时，又换了个看似繁琐实际时间复杂度较低的二分法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_place</span><span class="params">(data, left, right, target)</span>:</span></span><br><span class="line">    i, j = left, right</span><br><span class="line">    mid = i + (j - i) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">if</span> data[mid] &gt;= target <span class="keyword">and</span> data[mid - <span class="number">1</span>] &lt; target:</span><br><span class="line">            <span class="keyword">return</span> mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> data[mid] &gt;= target:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> get_place(data, left, right, target)</span><br><span class="line">        <span class="keyword">elif</span> data[mid - <span class="number">1</span>] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> get_place(data, left, right, target)</span><br><span class="line">    <span class="keyword">return</span> left + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = int(input(<span class="string">"请输入苹果的堆数:"</span>))</span><br><span class="line">print(<span class="string">"请输从左往右入每一堆的苹果数目:"</span>)</span><br><span class="line">A = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">m = int(input(<span class="string">"请输入询问次数:"</span>))</span><br><span class="line">print(<span class="string">"请输m个查询的索引值:"</span>)</span><br><span class="line">Q = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">    A[i] += A[i<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    print(get_place(A,<span class="number">0</span>,n<span class="number">-1</span>,Q[i]))</span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/25/some-easy-algorithm03/NO.3.png" width="240" hegiht="220"></p><h4 id="NO-4"><a href="#NO-4" class="headerlink" title="NO.4"></a><strong>NO.4</strong></h4><h5 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;又到了周末，小易的房间乱得一团糟。他希望将地上的杂物稍微整理下，使每团杂物看起来都紧凑一些，没有那么乱。<br>&emsp;&emsp;&ensp;地上一共有n团杂物，每团杂物都包含4个物品。第i物品的坐标用(ai,bi)表示，小易每次都可以将它绕着(xi,yi)逆时针旋转90°，这将消耗他的一次移动次数。<br>如果一团杂物的4个点构成了一个面积不为0的正方形，我们说它是紧凑的。<br>&emsp;&emsp;&ensp;因为小易很懒，所以他希望你帮助他计算一下每团杂物最少需要多少步移动能使它变得紧凑。</p><h5 id="样例：-3"><a href="#样例：-3" class="headerlink" title="样例："></a>样例：</h5><p>输入描述:<br>第一行一个数n(1 &lt;= n &lt;= 100)，表示杂物的团数。<br>接下来4n行，每4行表示一团杂物，每行4个数ai, bi，xi, yi, (-10\^4 &lt;= xi, yi, ai, bi &lt;= 10\^4)，表示第i个物品旋转的它本身的坐标和中心点坐标。<br>输出描述:<br>n行，每行1个数，表示最少移动次数。<br>输入例子:<br>4<br>1 1 0 0<br>-1 1 0 0<br>-1 1 0 0<br>1 -1 0 0<br>1 1 0 0<br>-2 1 0 0<br>-1 1 0 0<br>1 -1 0 0<br>1 1 0 0<br>-1 1 0 0<br>-1 1 0 0<br>-1 1 0 0<br>2 2 0 1<br>-1 0 0 -2<br>3 0 0 -2<br>-1 1 -2 0<br>输出例子:<br>1<br>-1<br>3<br>3<br>例子说明:<br>对于第一团杂物，我们可以旋转第二个或者第三个物品1次。</p><h5 id="源程序-3"><a href="#源程序-3" class="headerlink" title="源程序"></a>源程序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这题虽然比较烦，但是思路还是很明确的，用到一个旋转函数和一个判断正方形的函数，接着就是无脑地遍历比较了，这题时间居然没有超……</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#逆时针旋转90°</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(point)</span>:</span>    </span><br><span class="line">    <span class="comment">#print(point)</span></span><br><span class="line">    x = point[<span class="number">2</span>] - (point[<span class="number">1</span>] - point[<span class="number">3</span>])</span><br><span class="line">    y = point[<span class="number">3</span>] - (point[<span class="number">2</span>] - point[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> [x, y]</span><br><span class="line"><span class="comment">#判断是否是正方形</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_square</span><span class="params">(a, b, c, d)</span>:</span></span><br><span class="line">    x = float(a[<span class="number">0</span>] + b[<span class="number">0</span>] + c[<span class="number">0</span>] + d[<span class="number">0</span>]) / <span class="number">4</span></span><br><span class="line">    y = float(a[<span class="number">1</span>] + b[<span class="number">1</span>] + c[<span class="number">1</span>] + d[<span class="number">1</span>]) / <span class="number">4</span></span><br><span class="line">    newpoint = [rotate(a+[x,y]), rotate(b+[x,y]), rotate(c+[x,y]), rotate(d+[x,y])]</span><br><span class="line">    newpoint.sort()</span><br><span class="line">    oldpoint = [a,b,c,d]</span><br><span class="line">    oldpoint.sort()</span><br><span class="line">    <span class="keyword">if</span> newpoint == oldpoint <span class="keyword">and</span> [x,y] != a:   <span class="comment">#如果四个点逆时针旋转90°还是这四个坐标，则是正方形，注意防止四点重合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = int(input(<span class="string">"请输入杂物的团数:"</span>))</span><br><span class="line">result = []</span><br><span class="line">print(<span class="string">"请输入每个物品的坐标ai, bi，以及旋转中心的坐标xi, yi:"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    data = []</span><br><span class="line">    best_t = float(<span class="string">'inf'</span>)  <span class="comment">#用来记录最少操作次数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        a, b, x, y = list(map(int, input().split()))</span><br><span class="line">        temp = [[a, b]]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            temp.append(rotate(temp[<span class="number">-1</span>] + [x, y]))  <span class="comment">#记录每个点旋转1，2，3次后的坐标</span></span><br><span class="line">        data.append(temp)</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">    <span class="comment"># 遍历所有的可能性</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">if</span> is_square(data[<span class="number">0</span>][i], data[<span class="number">1</span>][j], data[<span class="number">2</span>][k], data[<span class="number">3</span>][m]):</span><br><span class="line">                        best_t = min(best_t, i + j + k + m)</span><br><span class="line">    <span class="keyword">if</span> best_t == float(<span class="string">'inf'</span>):   <span class="comment">#如果怎么旋转都不能构成正方形</span></span><br><span class="line">        result.append(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result.append(best_t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(<span class="string">"第"</span>+str(i+<span class="number">1</span>)+<span class="string">"堆最少需要移动"</span>+str(result[i])+<span class="string">"次"</span>)</span><br></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/25/some-easy-algorithm03/NO.4.png" width="400" hegiht="620"></p><h4 id="NO-5"><a href="#NO-5" class="headerlink" title="NO.5"></a><strong>NO.5</strong></h4><h5 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;今天上课，老师教了小易怎么计算加法和乘法，乘法的优先级大于加法，但是如果一个运算加了括号，那么它的优先级是最高的。例如：<br>1+2*3=7<br>1*(2+3)=5<br>1*2*3=6<br>(1+2)*3=9<br>&emsp;&emsp;&ensp;现在小易希望你帮他计算给定3个数a，b，c，在它们中间添加”+”， “*“， “(“， “)”符号，能够获得的最大值。</p><h5 id="样例：-4"><a href="#样例：-4" class="headerlink" title="样例："></a>样例：</h5><p>输入描述:<br>一行三个数a，b，c。(1 &lt;= a, b, c &lt;= 10)<br>输出描述:<br>能够获得的最大值。<br>输入例子:<br>1 2 3<br>输出例子:<br>9</p><h5 id="源程序-4"><a href="#源程序-4" class="headerlink" title="源程序"></a>源程序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这题可能是送分题……把6种情况都考虑即可</span></span><br><span class="line">print(<span class="string">"请输入3个数:"</span>)</span><br><span class="line">[a,b,c] = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">L = []</span><br><span class="line">L.append(a+b+c)</span><br><span class="line">L.append(a*b*c)</span><br><span class="line">L.append((a+b)*c)</span><br><span class="line">L.append(a*(b+c))</span><br><span class="line">L.append(a*b+c)</span><br><span class="line">L.append(a+b*c)</span><br><span class="line">print(<span class="string">"能获得的最大值为:"</span>,max(L))</span><br></pre></td></tr></table></figure><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/25/some-easy-algorithm03/NO.5.png" width="170" hegiht="120"></p><h4 id="NO-6"><a href="#NO-6" class="headerlink" title="NO.6"></a><strong>NO.6</strong></h4><h5 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易有一些立方体，每个立方体的边长为1，他用这些立方体搭了一些塔。<br>&emsp;&emsp;&ensp;现在小易定义：这些塔的不稳定值为它们之中最高的塔与最低的塔的高度差。<br>小易想让这些塔尽量稳定，所以他进行了如下操作：每次从某座塔上取下一块立方体，并把它放到另一座塔上。注意，小易不会把立方体放到它原本的那座塔上，因为他认为这样毫无意义。<br>&emsp;&emsp;&ensp;现在小易想要知道，他进行了不超过k次操作之后，不稳定值最小是多少。</p><h5 id="样例：-5"><a href="#样例：-5" class="headerlink" title="样例："></a>样例：</h5><p>输入描述:<br>第一行两个数n,k (1 &lt;= n &lt;= 100, 0 &lt;= k &lt;= 1000)表示塔的数量以及最多操作的次数。<br>第二行n个数，ai(1 &lt;= ai &lt;= 104)表示第i座塔的初始高度。<br>输出描述:<br>第一行两个数s, m，表示最小的不稳定值和操作次数。(m &lt;= k)<br>接下来m行，每行两个数x,y表示从第x座塔上取下一块立方体放到第y座塔上。<br>输入例子:<br>3 2<br>5 8 5<br>输出例子:<br>0 2<br>2 1<br>2 3</p><h5 id="源程序-5"><a href="#源程序-5" class="headerlink" title="源程序"></a>源程序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这题的思路也比较明确，注意到停止条件当最高高度和最低高度的差小于等于1时就很容易做了。</span></span><br><span class="line">print(<span class="string">"请输入塔的数量n和最多操作次数k:"</span>)</span><br><span class="line">[n,k] = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">print(<span class="string">"请输入每个塔的初始高度:"</span>)</span><br><span class="line">L = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">    diff = max(L) - min(L)</span><br><span class="line">    <span class="keyword">if</span> diff &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result.append([L.index(max(L)) + <span class="number">1</span>, L.index(min(L)) + <span class="number">1</span>])</span><br><span class="line">        L[L.index(max(L))] -= <span class="number">1</span></span><br><span class="line">        L[L.index(min(L))] +=  <span class="number">1</span></span><br><span class="line">print(str(max(L) - min(L)) + <span class="string">' '</span> + str(len(result)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">    print(str(result[i][<span class="number">0</span>]) + <span class="string">' '</span> + str(result[i][<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/25/some-easy-algorithm03/NO.601.png" width="250" hegiht="120"></p><p><img src="/2018/11/25/some-easy-algorithm03/NO.602.png" width="240" hegiht="120"></p><p><img src="/2018/11/25/some-easy-algorithm03/NO.603.png" width="260" hegiht="120"></p><h4 id="NO-7"><a href="#NO-7" class="headerlink" title="NO.7"></a><strong>NO.7</strong></h4><h5 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易在学校中学习了关于字符串的理论, 于是他基于此完成了一个字典的项目。<br>&emsp;&emsp;&ensp;小易的这个字典很奇特, 字典内的每个单词都包含n个’a’和m个’z’, 并且所有单词按照字典序排列。<br>小易现在希望你能帮他找出第k个单词是什么。</p><h5 id="样例：-6"><a href="#样例：-6" class="headerlink" title="样例："></a>样例：</h5><p>输入描述:<br>输入包括一行三个整数n, m, k(1 &lt;= n, m &lt;= 100, 1 &lt;= k &lt;= 109), 以空格分割。<br>输出描述:<br>输出第k个字典中的字符串，如果无解，输出-1。<br>输入例子:<br>2 2 6<br>输出例子:<br>zzaa<br>例子说明:<br>字典中的字符串依次为aazz azaz azza zaaz zaza zzaa</p><h5 id="源程序-6"><a href="#源程序-6" class="headerlink" title="源程序"></a>源程序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这题实际上是一个全排列问题。</span></span><br><span class="line"><span class="comment">#自己想没有头绪，主要是对全排列的基本概念不熟，然后网上一搜有很多解释，结果超时了……</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_permutation</span><span class="params">(position,end,arr,result=set<span class="params">()</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> position == end:</span><br><span class="line">        result.add(<span class="string">""</span>.join(arr))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> range(position,end):</span><br><span class="line">            arr[idx], arr[position] = arr[position], arr[idx]  <span class="comment">#position位置的元素与本身以及后面的元素进行交换，以确定position位置的元素</span></span><br><span class="line">            full_permutation(position + <span class="number">1</span>, end, arr, result)   <span class="comment">#确定了position位置的元素后，再确定后面位置的元素</span></span><br><span class="line">            arr[idx], arr[position] = arr[position], arr[idx]  <span class="comment">#把数组恢复成原来的样子</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"请输入字母a的个数n，字母z的个数m和查询索引值k:"</span>)</span><br><span class="line">[n, m, k] = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">arr = [<span class="string">'a'</span>] * n + [<span class="string">'z'</span>] * m</span><br><span class="line">L = list(full_permutation(<span class="number">0</span>,len(arr),arr))</span><br><span class="line">L.sort()</span><br><span class="line">print(<span class="string">"查询的字符串为:"</span>,L[k<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/25/some-easy-algorithm03/NO.7.png" width="370" hegiht="120"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font face="楷体">后记</font></h2><p>&emsp;&emsp;&ensp;几乎每道题的思路都很明确，但往往最容易想到的方法，时间复杂度要比较高，所以还需改进算法，或者采用其他更优的算法，这也应当是以后需要注意的方面。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>some easy algorithm02</title>
      <link href="/2018/11/23/some-easy-algorithm02/"/>
      <url>/2018/11/23/some-easy-algorithm02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font face="楷体">前言</font></h2><p>&emsp;&emsp;&ensp;最近又花了点时间做了2018年网易的春季校招题，和上次做的华为校招相比，网易的题目难度要稍稍高出一些，而且题量比较大，一共有12题，限时3小时？太可怕了🌚……当然还是有不少题比较容易上手的，只是像动态规划这类题有些多，对于我这种编程经验少的小菜鸡，还是很头疼的🙃。多加练习应该会有所进步吧！<br>&emsp;&emsp;&ensp;这12题我都是用Python实现的，并且在牛客网进行了测试，通过率没达到100%的都是因为超出时间限制了🌚……应该是我的方法不是最佳导致的，但也是一种解题思路吧，话不多说，放代码😁。</p><h2 id="2018网易校招题"><a href="#2018网易校招题" class="headerlink" title="2018网易校招题"></a><font face="楷体">2018网易校招题</font></h2><h4 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a><strong>NO.1</strong></h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;一种双核CPU的两个核能够同时的处理任务，现在有n个已知数据量的任务需要交给CPU处理，假设已知CPU的每个核1秒可以处理1kb，每个核同时只能处理一项任务。n个任务可以按照任意顺序放入CPU进行处理，现在需要设计一个方案让CPU处理完这批任务所需的时间最少，求这个最小的时间。</p><h5 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h5><p>输入包括两行：<br>第一行为整数n(1 ≤ n ≤ 50)。<br>第二行为n个整数length[i],(1024 ≤ length[i] ≤ 4194304)，表示每个任务的长度为length[i]kb，每个数均为1024的倍数。<br>输出一个整数，表示最少需要处理的时间。<br>输入样例：<br>5<br>3072 3072 7168 3072 1024<br>输出样例:<br>9216</p><h5 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#背包问题，即把数组分成两部分，使这两部分的和相差最小，也就是和小的那一部分的和尽可能接近于总合的一半</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_time</span><span class="params">(idx,V,L)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> L[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> V&gt;L[idx]:</span><br><span class="line">            <span class="keyword">return</span> max(sum_time(idx<span class="number">-1</span>,V,L),sum_time(idx<span class="number">-1</span>,V-L[idx],L)+L[idx])</span><br><span class="line">            <span class="comment">#动态规划，sum_time(idx,V,L)是指前idx个物品装入容量为V的背包中所可以获得的最大值</span></span><br><span class="line">            <span class="comment">#sum_time(idx-1,V,L)表示第idx个物品不装入背包的情况，sum_time(idx-1,V-L[idx],L)+L[idx]表示第idx个物品装入背包的情况</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> sum_time(idx<span class="number">-1</span>,V,L)</span><br><span class="line">n = int(input(<span class="string">"请输入任务个数[1,50]:"</span>))</span><br><span class="line">print(<span class="string">"请输入任务量[1024,4194304]，且是1024的倍数:"</span>)</span><br><span class="line">L = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">L.sort() <span class="comment">#排序，防止L[0]&gt;sum/2</span></span><br><span class="line">V = sum(L)/<span class="number">2</span>    <span class="comment">#计算背包容量</span></span><br><span class="line">print(<span class="string">"最少耗时为:"</span>,sum(L) - sum_time(len(L)<span class="number">-1</span>,V,L))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">法二，这是借鉴他人的方法，比我自己写的确实简单，但是我没有完全看懂他的意思……</span></span><br><span class="line"><span class="string">比如用提供的样例测试，在循环过后输出h，会得到12288，这其实是4个3078相加得到的结果，在实际分组中不会出现，所以我也不能确定他的方法对不对……不过他倒是能通过牛客网的测试🌚。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n=int(input())</span><br><span class="line">arr = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">h=set(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> list(h):</span><br><span class="line">        h.add(i+j)</span><br><span class="line"><span class="comment">#print(h)</span></span><br><span class="line">h = [i <span class="keyword">for</span> i <span class="keyword">in</span> h <span class="keyword">if</span> i&gt;=sum(arr)/<span class="number">2</span>]</span><br><span class="line">print(min(h))</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.1.png" width="270" hegiht="120"></p><hr><h4 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a><strong>NO.2</strong></h4><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易走在市区的街道上准备找朋友聚会，突然服务器发来警报,小易需要立即回公司修复这个紧急bug。<br>&emsp;&emsp;&ensp;假设市区是一个无限大的区域，每条街道假设坐标是(X，Y)，小易当前在(0，0)街道，办公室在(gx,gy)街道上。小易周围有多个出租车打车点，小易赶去办公室有两种选择，一种就是走路去公司，另外一种就是走到一个出租车打车点，然后从打车点的位置坐出租车去公司。<br>&emsp;&emsp;&ensp;每次移动到相邻的街道(横向或者纵向)走路将会花费walkTime时间，打车将花费taxiTime时间。小易需要尽快赶到公司去，现在小易想知道他最快需要花费多少时间去公司。</p><h5 id="样例：-1"><a href="#样例：-1" class="headerlink" title="样例："></a>样例：</h5><p>输入数据包括五行:<br>第一行为周围出租车打车点的个数n(1 ≤ n ≤ 50)。<br>第二行为每个出租车打车点的横坐标tX[i],(-10000 ≤ tX[i] ≤ 10000)。<br>第三行为每个出租车打车点的纵坐标tY[i], (-10000 ≤ tY[i] ≤ 10000)。<br>第四行为办公室坐标gx,gy,(-10000 ≤ gx,gy ≤ 10000),以空格分隔。<br>第五行为走路时间walkTime,(1 ≤ walkTime ≤ 1000)和taxiTime,(1 ≤ taxiTime ≤ 1000),以空格分隔。<br>输出一个整数表示，小易最快能赶到办公室的时间。<br>输入样例：<br>2<br>-2 -2<br>0 -2<br>-4 -2<br>15 3<br>输出样例：<br>42</p><h5 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#很简单，没啥说的</span></span><br><span class="line">n = int(input(<span class="string">"请输入打车点数:"</span>))</span><br><span class="line">print(<span class="string">"请输入打车点的横坐标:"</span>)</span><br><span class="line">tX = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">print(<span class="string">"请输入打车点的纵坐标:"</span>)</span><br><span class="line">tY = [int(y) <span class="keyword">for</span> y <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">print(<span class="string">"请输入办公室坐标:"</span>)</span><br><span class="line">[gx,gy] = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">print(<span class="string">"请输入走路时间和打车时间:"</span>)</span><br><span class="line">[walkTime,taxiTime]= [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">Walktime = (abs(gx) + abs(gy)) * walkTime     <span class="comment">#走路去公司花的时间</span></span><br><span class="line">Dis1 = [abs(tX[i]) + abs(tY[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tX))]  <span class="comment">#人距打车点的距离</span></span><br><span class="line">Dis2 = [abs(tX[i] - gx) + abs(tY[i] - gy) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tX))]    <span class="comment">#办公室距打车点的距离</span></span><br><span class="line">Taxitime = [(Dis1[i] * walkTime + Dis2[i] * taxiTime) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tX))]   <span class="comment">#打车去公司花的时间</span></span><br><span class="line">mintime = min(Walktime,min(Taxitime))</span><br><span class="line">print(<span class="string">"最快赶到办公室的时间为:"</span>,mintime)</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.2.png" width="220" hegiht="400"></p><hr><h4 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a><strong>NO.3</strong></h4><h5 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;在幼儿园有n个小朋友排列为一个队伍，从左到右一个挨着一个编号为(0~n-1)。其中有一些是男生，有一些是女生，男生用’B’表示，女生用’G’表示。<br>&emsp;&emsp;&ensp;小朋友们都很顽皮，当一个男生挨着的是女生的时候就会发生矛盾。作为幼儿园的老师，你需要让男生挨着女生或者女生挨着男生的情况最少。你只能在原队形上进行调整，每次调整只能让相邻的两个小朋友交换位置。<br>&emsp;&emsp;&ensp;现在需要尽快完成队伍调整，你需要计算出最少需要调整多少次可以让上述情况最少。<br>&emsp;&emsp;&ensp;例如：GGBBG -&gt; GGBGB -&gt; GGGBB<br>这样就使之前的两处男女相邻变为一处相邻，需要调整队形2次。</p><h5 id="样例：-2"><a href="#样例：-2" class="headerlink" title="样例："></a>样例：</h5><p>输入数据包括一个长度为n且只包含G和B的字符串，n不超过50。<br>输出一个整数，表示最少需要的调整队伍的次数。<br>输入样例：<br>GGBBG<br>输出样例：<br>2</p><h5 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从最终的情况考虑，即G全在左边或B全在左边。</span></span><br><span class="line">mystr = input(<span class="string">"请输入一个长度小于50的字符串："</span>)</span><br><span class="line">sG = <span class="number">0</span></span><br><span class="line">sB = <span class="number">0</span></span><br><span class="line">sumG = <span class="number">0</span></span><br><span class="line">sumB = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> mystr:</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">'G'</span>:</span><br><span class="line">        sumG += mystr.index(s) - sG</span><br><span class="line">        mystr = mystr.replace(<span class="string">'G'</span>, <span class="string">'X'</span>, <span class="number">1</span>)</span><br><span class="line">        sG += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> s ==<span class="string">'B'</span>:</span><br><span class="line">        sumB += mystr.index(s) - sB</span><br><span class="line">        mystr = mystr.replace(<span class="string">'B'</span>, <span class="string">'X'</span>, <span class="number">1</span>)</span><br><span class="line">        sB += <span class="number">1</span></span><br><span class="line">print(<span class="string">"最少调整次数为:"</span>,min(sumB,sumG))</span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.3.png" width="270" hegiht="100"></p><hr><h4 id="NO-4"><a href="#NO-4" class="headerlink" title="NO.4"></a><strong>NO.4</strong></h4><h5 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;有一个长度为n序列，小易想移除掉里面的重复元素，但是小易想是对于每种元素保留最后出现的那个。小易遇到了困难,希望你来帮助他。</p><h5 id="样例：-3"><a href="#样例：-3" class="headerlink" title="样例："></a>样例：</h5><p>输入包括两行：<br>第一行为序列长度n(1 ≤ n ≤ 50)<br>第二行为n个数sequence[i],(1 ≤ sequence[i] ≤ 1000)，以空格分隔。<br>输出消除重复元素之后的序列，以空格分隔，行末无空格。<br>输入样例：<br>9<br>100 100 100 99 99 99 100 100 100<br>输出样例：<br>99 100</p><h5 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#emmm，也没啥说的，利用删除添加即可。</span></span><br><span class="line">n = int(input(<span class="string">"请输入元素个数:"</span>))</span><br><span class="line">print(<span class="string">"请输入元素序列:"</span>)</span><br><span class="line">L = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> L:</span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">in</span> a:</span><br><span class="line">        a.remove(s)</span><br><span class="line">        a.append(s)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a.append(s)</span><br><span class="line">print(<span class="string">"去除重复元素后的序列为:"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)<span class="number">-1</span>):</span><br><span class="line">    print(a[i],end = <span class="string">' '</span>)</span><br><span class="line">print(a[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.4.png" width="270" hegiht="300"></p><hr><h4 id="NO-5"><a href="#NO-5" class="headerlink" title="NO.5"></a><strong>NO.5</strong></h4><h5 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易拥有一个拥有魔力的手环，上面有n个数字(构成一个环),当这个魔力手环每次使用魔力的时候就会发生一种奇特的变化：每个数字会变成自己跟后面一个数字的和(最后一个数字的后面一个数字是第一个),一旦某个位置的数字大于等于100就马上对100取模(比如某个位置变为103,就会自动变为3)。<br>&emsp;&emsp;&ensp;现在给出这个魔力手环的构成，请你计算出使用k次魔力之后魔力手环的状态。 </p><h5 id="样例：-4"><a href="#样例：-4" class="headerlink" title="样例："></a>样例：</h5><p>输入数据包括两行：<br>第一行为两个整数n (2 ≤ n ≤ 50)和k (1 ≤ k ≤ 2000000000),以空格分隔。<br>第二行为魔力手环初始的n个数，以空格分隔，范围都在0至99。<br>输出魔力手环使用k次之后的状态，以空格分隔，行末无空格。<br>输入样例：<br>3 2<br>1 2 3<br>输出样例：<br>8 9 7</p><h5 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里要注意直接赋值、浅拷贝和深拷贝的区别。</span></span><br><span class="line">print(<span class="string">"请输入数字个数n和使用次数k:"</span>)</span><br><span class="line">[n,k] = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">print(<span class="string">"请输入初始的n个数:"</span>)</span><br><span class="line">L = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input().strip().split(<span class="string">' '</span>)]</span><br><span class="line">L0 = L.copy()   <span class="comment">#浅拷贝，注意列表不能直接简单的赋值！！！</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        L0[j] = (L[j] + L[j+<span class="number">1</span>]) % <span class="number">100</span></span><br><span class="line">    L0[<span class="number">-1</span>] = (L[<span class="number">-1</span>] + L[<span class="number">0</span>]) % <span class="number">100</span></span><br><span class="line">    L = L0.copy()</span><br><span class="line">print(<span class="string">"使用后手环上的数字为:"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(L)<span class="number">-1</span>):</span><br><span class="line">    print(L[i],end = <span class="string">' '</span>)</span><br><span class="line">print(L[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.5.png" width="220" hegiht="200"></p><hr><h4 id="NO-6"><a href="#NO-6" class="headerlink" title="NO.6"></a><strong>NO.6</strong></h4><h5 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;现在有n位工程师和6项工作(编号为0至5)，现在给出每个人能够胜任的工作序号表(用一个字符串表示，比如：045，表示某位工程师能够胜任0号，4号，5号工作)。<br>&emsp;&emsp;&ensp;现在需要进行工作安排，每位工程师只能被安排到自己能够胜任的工作当中去，两位工程师不能安排到同一项工作当中去。<br>&emsp;&emsp;&ensp;如果两种工作安排中有一个人被安排在的工作序号不一样就被视为不同的工作安排，现在需要计算出有多少种不同工作安排计划。 </p><h5 id="样例：-5"><a href="#样例：-5" class="headerlink" title="样例："></a>样例：</h5><p>输入数据有n+1行：<br>第一行为工程师人数n(1 ≤ n ≤ 6)。<br>接下来的n行，每行一个字符串表示第i(1 ≤ i ≤ n)个人能够胜任的工作(字符串不一定等长的)。<br>输出一个整数，表示有多少种不同的工作安排方案。<br>输入样例：<br>6<br>012345<br>012345<br>012345<br>012345<br>012345<br>012345<br>输出样例：<br>720</p><h5 id="源代码-5"><a href="#源代码-5" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#题目有两点没有交代清楚，非常坑:</span></span><br><span class="line"><span class="comment">#1、所有工程师都必须有事可做，且一个人只能做一项工程，而不能分饰两角</span></span><br><span class="line"><span class="comment">#2、不必所有事都要做。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">workways</span><span class="params">(n,work,res)</span>:</span></span><br><span class="line">    ways = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ws <span class="keyword">in</span> work[n]:   <span class="comment"># 遍历第n个工程师能做的工作</span></span><br><span class="line">        <span class="keyword">if</span> ws <span class="keyword">not</span> <span class="keyword">in</span> res:   <span class="comment"># 如果该工作没有被安排</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">                ways += <span class="number">1</span>    <span class="comment">#如果最后一个工程师还能够安排工作，则数量 +1.</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ways += workways(n<span class="number">-1</span>,work,res+[ws])   <span class="comment">#将工作ws安排后，剩下n-1个工程师能分配的方法</span></span><br><span class="line">    <span class="keyword">return</span> ways</span><br><span class="line"></span><br><span class="line">n = int(input(<span class="string">"请输入工程师人数:"</span>))</span><br><span class="line">L =[]</span><br><span class="line">print(<span class="string">"请输入每个人能够胜任的工作序号:"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    L.append(input(<span class="string">""</span>))</span><br><span class="line">print(<span class="string">"一共有"</span>,workways(n<span class="number">-1</span>,L,[]),<span class="string">"种工作安排"</span>)</span><br></pre></td></tr></table></figure><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.601.png" width="220" hegiht="300"></p><p><img src="/2018/11/23/some-easy-algorithm02/NO.602.png" width="240" hegiht="300"></p><hr><h4 id="NO-7"><a href="#NO-7" class="headerlink" title="NO.7"></a><strong>NO.7</strong></h4><h5 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易最近在数学课上学习到了集合的概念,集合有三个特征：1.确定性 2.互异性 3.无序性.小易的老师给了小易这样一个集合：</p><script type="math/tex; mode=display">S = \{ p/q | w ≤ p ≤ x, y ≤ q ≤ z \}</script><p>&emsp;&emsp;&ensp;需要根据给定的w，x，y，z,求出集合中一共有多少个元素。小易才学习了集合还解决不了这个复杂的问题,需要你来帮助他。 </p><h5 id="样例：-6"><a href="#样例：-6" class="headerlink" title="样例："></a>样例：</h5><p>输入包括一行：<br>一共4个整数分别是w(1 ≤ w ≤ x)，x(1 ≤ x ≤ 100)，y(1 ≤ y ≤ z)，z(1 ≤ z ≤ 100)，以空格分隔。<br>输出集合中元素的个数。<br>输入样例：<br>1 10 1 1<br>输出样例：<br>10</p><h5 id="源代码-6"><a href="#源代码-6" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#很简单，注意集合的使用。</span></span><br><span class="line">print(<span class="string">"请输入4个整数w,x,y,z:"</span>)</span><br><span class="line">[w,x,y,z] = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input(<span class="string">""</span>).strip().split(<span class="string">' '</span>)]</span><br><span class="line">s = set()</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(w,x+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> range(y,z+<span class="number">1</span>):</span><br><span class="line">        s.add(float(p)/q)</span><br><span class="line">print(<span class="string">"集合中元素个数为:"</span>,len(s))</span><br></pre></td></tr></table></figure><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.701.png" width="180" hegiht="100"></p><p><img src="/2018/11/23/some-easy-algorithm02/NO.702.png" width="180" hegiht="100"></p><hr><h4 id="NO-8"><a href="#NO-8" class="headerlink" title="NO.8"></a><strong>NO.8</strong></h4><h5 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;常规的表达式求值，我们都会根据计算的优先级来计算。比如*/的优先级就高于+-。<br>&emsp;&emsp;&ensp;但是小易所生活的世界的表达式规则很简单，从左往右依次计算即可，而且小易所在的世界没有除法，意味着表达式中没有/，只有(+, - 和 *)。<br>&emsp;&emsp;&ensp;现在给出一个表达式，需要你帮忙计算出小易所在的世界这个表达式的值为多少。</p><h5 id="样例：-7"><a href="#样例：-7" class="headerlink" title="样例："></a>样例：</h5><p>输入为一行字符串，即一个表达式。其中运算符只有-,+,*。参与计算的数字只有0~9。<br>保证表达式都是合法的，排列规则如样例所示。<br>输出一个数，即表达式的值。<br>输入样例：<br>3+5*7<br>输出样例：<br>56</p><h5 id="源代码-7"><a href="#源代码-7" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#思路也很明确，利用参与计算的数字只有0~9的条件。</span></span><br><span class="line">mystr = input(<span class="string">"请输入一个表达式:"</span>)</span><br><span class="line">result = <span class="number">0</span></span><br><span class="line">L = list(mystr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(L)):</span><br><span class="line">    <span class="keyword">if</span> L[i] == <span class="string">'+'</span>:</span><br><span class="line">        L[i + <span class="number">1</span>] = str(int(L[i - <span class="number">1</span>]) + int(L[i + <span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">elif</span> L[i] == <span class="string">'-'</span>:</span><br><span class="line">        L[i + <span class="number">1</span>] = str(int(L[i - <span class="number">1</span>]) - int(L[i + <span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">elif</span> L[i] == <span class="string">'*'</span>:</span><br><span class="line">        L[i + <span class="number">1</span>] = str(int(L[i - <span class="number">1</span>]) * int(L[i + <span class="number">1</span>]))</span><br><span class="line">print(<span class="string">"运算结果为:"</span>,int(L[<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure><h5 id="运行结果-7"><a href="#运行结果-7" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.8.png" width="180" hegiht="100"></p><hr><h4 id="NO-9"><a href="#NO-9" class="headerlink" title="NO.9"></a><strong>NO.9</strong></h4><h5 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易有一块n*n的棋盘，棋盘的每一个格子都为黑色或者白色，小易现在要用他喜欢的红色去涂画棋盘。<br>&emsp;&emsp;&ensp;小易会找出棋盘中某一列中拥有相同颜色的最大的区域去涂画，帮助小易算算他会涂画多少个棋格。 </p><h5 id="样例：-8"><a href="#样例：-8" class="headerlink" title="样例："></a>样例：</h5><p>输入数据包括n+1行：<br>第一行为一个整数n(1 ≤ n ≤ 50),即棋盘的大小。<br>接下来的n行每行一个字符串表示第i行棋盘的颜色，’W’表示白色，’B’表示黑色。<br>输出小易会涂画的区域大小。<br>输入样例：<br>3<br>BWW<br>BBB<br>BWB<br>输出样例：<br>3</p><h5 id="源代码-8"><a href="#源代码-8" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这题我写的比较烦了，开始没理解题目的要求，原来是要求连续的区域。</span></span><br><span class="line"><span class="comment">#后来懒得换方法就直接在原来代码上改了。</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#输入</span></span><br><span class="line">n = int(input(<span class="string">"请输入棋盘的大小n:"</span>))</span><br><span class="line">print(<span class="string">"输入每一行的颜色:"</span>)</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    L.append(input())</span><br><span class="line"><span class="comment">#行变成列，相当于转置</span></span><br><span class="line">L1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    L0 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        L0.append(L[j][i])</span><br><span class="line">    L1.append(<span class="string">""</span>.join(L0))</span><br><span class="line"><span class="comment">#计算各列最大连续个数 </span></span><br><span class="line">B = []</span><br><span class="line">W = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(L1)):</span><br><span class="line">    tmpB = re.findall(<span class="string">'B+'</span>,L1[i])</span><br><span class="line">    tmpW = re.findall(<span class="string">'W+'</span>,L1[i])</span><br><span class="line">    tmpB.append(<span class="string">'B'</span>)  <span class="comment">#防止出现tmpB为空的现状，就不能计算len了，</span></span><br><span class="line">    tmpW.append(<span class="string">'W'</span>)  <span class="comment">#这样的话只会把长度增加1，并不会影响最终的结果</span></span><br><span class="line">    B.append(max(len(s) <span class="keyword">for</span> s <span class="keyword">in</span> tmpB))</span><br><span class="line">    W.append(max(len(s) <span class="keyword">for</span> s <span class="keyword">in</span> tmpW))</span><br><span class="line">print(<span class="string">"最终涂画区域大小为:"</span>,max(max(B),max(W)))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#法二，由于我的方法比较繁琐，就再贴上别人的代码吧</span></span><br><span class="line"><span class="comment">#该方法很常规又比较机智……巧妙利用了列表的-1索引值。我怎么就想了上面那个这么繁琐的方法🙃。</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">line = sys.stdin.readline().strip()</span><br><span class="line">num = int(line)</span><br><span class="line">arr = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    arr.append(sys.stdin.readline().strip())</span><br><span class="line">print(arr)</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    B_count = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,num<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> arr[j][i] == arr[j+<span class="number">1</span>][i]:</span><br><span class="line">            B_count[<span class="number">-1</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            B_count.append(<span class="number">1</span>)</span><br><span class="line">    result.append(max(B_count))</span><br><span class="line">print(max(result))</span><br></pre></td></tr></table></figure><h5 id="运行结果-8"><a href="#运行结果-8" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.901.png" width="220" hegiht="100"></p><p><img src="/2018/11/23/some-easy-algorithm02/NO.902.png" width="200" hegiht="100"></p><hr><h4 id="NO-10"><a href="#NO-10" class="headerlink" title="NO.10"></a><strong>NO.10</strong></h4><h5 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易参与了一个记单词的小游戏。游戏开始系统提供了m个不同的单词，小易记忆一段时间之后需要在纸上写出他记住的单词。<br>&emsp;&emsp;&ensp;小易一共写出了n个他能记住的单词，如果小易写出的单词是在系统提供的，将获得这个单词长度的平方的分数。注意小易写出的单词可能重复，但是对于每个正确的单词只能计分一次。 </p><h5 id="样例：-9"><a href="#样例：-9" class="headerlink" title="样例："></a>样例：</h5><p>输入数据包括三行：<br>第一行为两个整数n(1 ≤ n ≤ 50)和m(1 ≤ m ≤ 50)。以空格分隔<br>第二行为n个字符串，表示小易能记住的单词，以空格分隔，每个单词的长度小于等于50。<br>第三行为m个字符串，系统提供的单词，以空格分隔，每个单词的长度小于等于50。<br>输出一个整数表示小易能获得的分数<br>输入样例：<br>3 4<br>apple orange strawberry<br>strawberry orange grapefruit watermelon<br>输出样例：<br>136</p><h5 id="源代码-9"><a href="#源代码-9" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#比较简单，利用集合……不过这也能超时？</span></span><br><span class="line">print(<span class="string">"请输入能记住的单词数n和系统提供的单词数m:"</span>)</span><br><span class="line">[n,m] = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">print(<span class="string">"请输入能记住的单词:"</span>)</span><br><span class="line">L = [x <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">print(<span class="string">"请输入系统提供的单词:"</span>)</span><br><span class="line">L0 = [x <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line">remset = set(L)</span><br><span class="line">scores = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> words <span class="keyword">in</span> remset:</span><br><span class="line">    <span class="keyword">if</span> words <span class="keyword">in</span> L0:</span><br><span class="line">        scores += len(words)*len(words)</span><br><span class="line">print(<span class="string">"最终得分为:"</span>,scores)</span><br></pre></td></tr></table></figure><h5 id="运行结果-9"><a href="#运行结果-9" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.1001.png" width="360" hegiht="200"></p><p><img src="/2018/11/23/some-easy-algorithm02/NO.1002.png" width="360" hegiht="200"></p><hr><h4 id="NO-11"><a href="#NO-11" class="headerlink" title="NO.11"></a><strong>NO.11</strong></h4><h5 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;小易有n块砖块，每一块砖块有一个高度。小易希望利用这些砖块堆砌两座相同高度的塔。<br>&emsp;&emsp;&ensp;为了让问题简单，砖块堆砌就是简单的高度相加，某一块砖只能使用在一座塔中一次。小易现在让能够堆砌出来的两座塔的高度尽量高，小易能否完成呢。 </p><h5 id="样例：-10"><a href="#样例：-10" class="headerlink" title="样例："></a>样例：</h5><p>输入包括两行：<br>第一行为整数n(1 ≤ n ≤ 50)，即一共有n块砖块。<br>第二行为n个整数，表示每一块砖块的高度height[i],(1 ≤ height[i] ≤ 500000)。<br>如果小易能堆砌出两座高度相同的塔，输出最高能拼凑的高度，如果不能则输出-1。<br>保证答案不大于500000。<br>输入样例：<br>3<br>2 3 5<br>输出样例：<br>5</p><h5 id="源代码-10"><a href="#源代码-10" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">动态规划，tower(idx,diff)表示用i个砖块堆积，使两个塔相差diff，比较矮的搭的高度。</span></span><br><span class="line"><span class="string">寻找idx和idx-1的关系，可以分四种情况，取最大值</span></span><br><span class="line"><span class="string">1、丢弃第i块砖tower(idx - 1, diff, L)</span></span><br><span class="line"><span class="string">2、第i块砖放低塔，低塔仍是低塔tower(idx - 1, diff + L[idx-1], L) + L[idx-1]</span></span><br><span class="line"><span class="string">3、第i块砖放低塔，低塔变高塔tower(idx - 1, L[idx-1] - diff, L) + L[idx-1] - diff)</span></span><br><span class="line"><span class="string">4、第i块砖放高塔上tower(idx - 1, diff - L[idx-1], L)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tower</span><span class="params">(idx,diff,L)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span> <span class="keyword">and</span> diff == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> idx == <span class="number">0</span> <span class="keyword">and</span> diff &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> float(<span class="string">'-inf'</span>)</span><br><span class="line">    <span class="keyword">elif</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> diff &gt; L[idx<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> max(tower(idx - <span class="number">1</span>, diff, L), tower(idx - <span class="number">1</span>, diff + L[idx<span class="number">-1</span>], L) + L[idx<span class="number">-1</span>],</span><br><span class="line">                       tower(idx - <span class="number">1</span>, diff - L[idx<span class="number">-1</span>], L))</span><br><span class="line">        <span class="keyword">elif</span> diff &lt;= L[idx<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> max(tower(idx - <span class="number">1</span>, diff, L), tower(idx - <span class="number">1</span>, diff + L[idx<span class="number">-1</span>], L) + L[idx<span class="number">-1</span>],</span><br><span class="line">                       tower(idx - <span class="number">1</span>, L[idx<span class="number">-1</span>] - diff, L) + L[idx<span class="number">-1</span>] - diff)</span><br><span class="line">n = int(input(<span class="string">"请输入砖块数:"</span>))</span><br><span class="line">print(<span class="string">"请输入每一块砖块的高度:"</span>)</span><br><span class="line">L = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().strip().split(<span class="string">" "</span>)]</span><br><span class="line"><span class="keyword">if</span> tower(len(L),<span class="number">0</span>,L) &lt;= <span class="number">0</span>:</span><br><span class="line">    print(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"最高相同高度为:"</span>,tower(len(L),<span class="number">0</span>,L))</span><br></pre></td></tr></table></figure><h5 id="运行结果-10"><a href="#运行结果-10" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.1101.png" width="200" hegiht="100"></p><p><img src="/2018/11/23/some-easy-algorithm02/NO.1102.png" width="200" hegiht="100"></p><p><img src="/2018/11/23/some-easy-algorithm02/NO.1103.png" width="200" hegiht="100"></p><hr><h4 id="NO-12"><a href="#NO-12" class="headerlink" title="NO.12"></a><strong>NO.12</strong></h4><h5 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h5><p>&emsp;&emsp;&ensp;易老师购买了一盒饼干，盒子中一共有k块饼干，但是数字k有些数位变得模糊了，看不清楚数字具体是多少了。<br>&emsp;&emsp;&ensp;易老师需要你帮忙把这k块饼干平分给n个小朋友，易老师保证这盒饼干能平分给n个小朋友。现在你需要计算出k有多少种可能的数值 。</p><h5 id="样例：-11"><a href="#样例：-11" class="headerlink" title="样例："></a>样例：</h5><p>输入包括两行：<br>第一行为盒子上的数值k，模糊的数位用X表示，长度小于18(可能有多个模糊的数位)。<br>第二行为小朋友的人数n。<br>输出k可能的数值种数，保证至少为1。<br>输入样例：<br>9999999999999X<br>3<br>输出样例：<br>4</p><h5 id="源代码-11"><a href="#源代码-11" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">没错，又是动态规划🌚……</span></span><br><span class="line"><span class="string">但这里用的不是函数递归，我用递归写了好久最后还是放弃了。</span></span><br><span class="line"><span class="string">主要利用不同位数产生余数的关系。</span></span><br><span class="line"><span class="string">比如已经知道123%4的余数是3，怎么计算1234%4呢？</span></span><br><span class="line"><span class="string">（3*10+4）%4=2，这就计算出来了。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">k = input(<span class="string">"请输入饼干数目:"</span>)</span><br><span class="line">n = int(input(<span class="string">"请输入小朋友人数:"</span>))</span><br><span class="line">rem = [<span class="number">1</span>] + [<span class="number">0</span>] * (n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> k:</span><br><span class="line">    temp = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">if</span> s != <span class="string">'X'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            temp[ (i * <span class="number">10</span> + int(s)) % n ] += rem[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                temp[(i * <span class="number">10</span> + s) % n] += rem[i]</span><br><span class="line">    rem = temp.copy()</span><br><span class="line">print(<span class="string">"共有"</span>,rem[<span class="number">0</span>],<span class="string">"种可能"</span>)</span><br></pre></td></tr></table></figure><h5 id="运行结果-11"><a href="#运行结果-11" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/23/some-easy-algorithm02/NO.1201.png" width="220" hegiht="100"></p><p><img src="/2018/11/23/some-easy-algorithm02/NO.1202.png" width="180" hegiht="100"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font face="楷体">后记</font></h2><p>&emsp;&emsp;&ensp;终于刷完了这12题，一路坎坷，还要加倍努力才行。其实这12题主要就是1、6、11、12这4道涉及了动态规划，比较锻炼脑力、考验算法的选择，其他题都还好。不多说了，搬砖去……</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>some easy algorithm01</title>
      <link href="/2018/11/21/some-easy-algorithm01/"/>
      <url>/2018/11/21/some-easy-algorithm01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font face="楷体">前言</font></h2><p>&emsp;&emsp;&ensp;今天刷了几道华为的校招题，网上大都是用C++实现的，而我采用了更为方便的Python，对于我这种很少编程的人来说，还是有些收获的，于是打算把这些题整理一下。</p><h2 id="华为校招题"><a href="#华为校招题" class="headerlink" title="华为校招题"></a><font face="楷体">华为校招题</font></h2><h4 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a><strong>NO.1</strong></h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>输入一串字符串，统计字符串中各字符出现的次数，并将其按照ASCII码递增的顺序输出，输出要求每种字符都先一个一个输出。</p><h5 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h5><p>输入:eeefgghh<br>输出:efgheghe</p><h5 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#统计字符个数</span></span><br><span class="line">mystr = input(<span class="string">"请输入一串字符:"</span>)</span><br><span class="line">strnum = &#123;&#125;</span><br><span class="line">L0 = list(mystr)</span><br><span class="line">L = []</span><br><span class="line"><span class="comment">#统计每个字符的个数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mystr:</span><br><span class="line">    strnum[i] = mystr.count(i)</span><br><span class="line">print(strnum)</span><br><span class="line"><span class="comment">#将字符串排序</span></span><br><span class="line">L0.sort()</span><br><span class="line">mystr = <span class="string">""</span>.join(L0)</span><br><span class="line"><span class="comment">#按要求进行重排</span></span><br><span class="line">length = len(mystr)</span><br><span class="line"><span class="keyword">while</span>(length&gt;<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> strnum.keys():</span><br><span class="line">        <span class="keyword">if</span> strnum[x] &gt; <span class="number">0</span>:</span><br><span class="line">            L.append(x)</span><br><span class="line">            strnum[x] -= <span class="number">1</span></span><br><span class="line">            length -= <span class="number">1</span></span><br><span class="line"><span class="comment">#列表转字符串</span></span><br><span class="line">result = <span class="string">""</span>.join(L)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.1.png" width="280" hegiht="120"></p><hr><h4 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a><strong>NO.2</strong></h4><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><p>给出一个字符串，将重复的字符去除，仅保留第一次出现的字符，且保持去重后的字符在原字符串中的顺序不变。</p><h5 id="样例：-1"><a href="#样例：-1" class="headerlink" title="样例："></a>样例：</h5><p>输入:aabcdfffea<br>输出:abcdfe</p><h5 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给出一个字符串，将重复的字符去除，仅保留第一次出现的字符，且保持去重后的字符在原字符串中的顺序不变。</span></span><br><span class="line">mystr = input(<span class="string">"请输入一串字符:"</span>)</span><br><span class="line">strdict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mystr:</span><br><span class="line">    strdict[i] = mystr.count(i)</span><br><span class="line">result = <span class="string">""</span>.join(strdict.keys())</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.2.png" width="220" hegiht="100"></p><hr><h4 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a><strong>NO.3</strong></h4><h5 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h5><p>举行一场8小时的聚会，12：00-20：00，让来访客人事先填好到达的时间和离开的时间，为了掌握聚会期间座位的数目，<br>需要先估计不同时间的最大客人数量。<br>1、以整点计算，比如“12，18”表示12点后13点前到，17点后18点前离开<br>2、按小时区间统计客人数量，需统计[12,13).[13.14)…[19,,20)共8个时间段的客人数<br>3、假设最大邀请100人</p><h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><p>见运行结果（注意输入的逗号是英文）</p><h5 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">persondict = &#123;<span class="string">'[12,13)'</span>:<span class="number">0</span>,<span class="string">'[13,14)'</span>:<span class="number">0</span>,<span class="string">'[14,15)'</span>:<span class="number">0</span>,<span class="string">'[15,16)'</span>:<span class="number">0</span>,<span class="string">'[16,17)'</span>:<span class="number">0</span>,<span class="string">'[17,18)'</span>:<span class="number">0</span>,<span class="string">'[18,19)'</span>:<span class="number">0</span>,<span class="string">'[19,20)'</span>:<span class="number">0</span>&#125;</span><br><span class="line">timetable = [<span class="string">'[12,13)'</span>,<span class="string">'[13,14)'</span>,<span class="string">'[14,15)'</span>,<span class="string">'[15,16)'</span>,<span class="string">'[16,17)'</span>,<span class="string">'[17,18)'</span>,<span class="string">'[18,19)'</span>,<span class="string">'[19,20)'</span>]</span><br><span class="line">mystr = input(<span class="string">"请输入到达和离开时间:"</span>)</span><br><span class="line">[arrive,leave] = mystr.split(<span class="string">','</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(arrive)<span class="number">-12</span>,int(leave)<span class="number">-12</span>):</span><br><span class="line">    persondict[timetable[i]] += <span class="number">1</span></span><br><span class="line">ans = input(<span class="string">"是否还有来宾？[y/n]:"</span>)</span><br><span class="line">person = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(person&lt;<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> ans == <span class="string">'y'</span>:</span><br><span class="line">        person += <span class="number">1</span></span><br><span class="line">        mystr = input(<span class="string">"请输入到达和离开时间:"</span>)</span><br><span class="line">        [arrive, leave] = mystr.split(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(arrive) - <span class="number">12</span>, int(leave) - <span class="number">12</span>):</span><br><span class="line">            persondict[timetable[i]] += <span class="number">1</span></span><br><span class="line">        ans = input(<span class="string">"是否还有来宾？[y/n]:"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(persondict)</span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.3.png" width="600" hegiht="400"></p><hr><h4 id="NO-4"><a href="#NO-4" class="headerlink" title="NO.4"></a><strong>NO.4</strong></h4><h5 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h5><p>请一个在字符串中找出连续最长的数字串，并把这个串的长度返回；如果存在长度相同的连续数字串，返回最后一个连续数字串；<br>如果没有数字，则返回空字符串（“”）而不是NULL</p><h5 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h5><p>见运行结果</p><h5 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mystr = input(<span class="string">"请输入一个字符串:"</span>)</span><br><span class="line">L = re.findall(<span class="string">'\d+'</span>,mystr)   <span class="comment">#提取所有连续的数字串</span></span><br><span class="line"><span class="keyword">if</span>(len(L) == <span class="number">0</span>):</span><br><span class="line">    maxnum =<span class="string">"\""</span><span class="string">"\""</span>   <span class="comment">#如果没有数字，则返回空字符串（“”）</span></span><br><span class="line">    maxlen = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    maxnum = L[<span class="number">0</span>]</span><br><span class="line">    maxlen = len(L[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span> len(num) &gt;= maxlen:</span><br><span class="line">            maxnum = num</span><br><span class="line">            maxlen = len(num)</span><br><span class="line">print(<span class="string">"最长的数字串为:"</span>,maxnum)</span><br><span class="line">print(<span class="string">"长度为:"</span>,maxlen)</span><br></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.401.png" width="250" hegiht="120"><br><img src="/2018/11/21/some-easy-algorithm01/NO.402.png" width="250" hegiht="120"><br><img src="/2018/11/21/some-easy-algorithm01/NO.403.png" width="200" hegiht="120"></p><hr><h4 id="NO-5"><a href="#NO-5" class="headerlink" title="NO.5"></a><strong>NO.5</strong></h4><h5 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h5><p>输入两个长整数,输出相乘后的结果</p><h5 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h5><p>见运行结果</p><h5 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输入两个长整数,输出相乘后的结果</span></span><br><span class="line">num1 = int(input(<span class="string">"请输入第一个数:"</span>))</span><br><span class="line">num2 = int(input(<span class="string">"请输入第二个数:"</span>))</span><br><span class="line"><span class="comment">#判断结果的正负</span></span><br><span class="line"><span class="keyword">if</span> ((num1&gt;<span class="number">0</span>) <span class="keyword">and</span> (num2&gt;<span class="number">0</span>)) <span class="keyword">or</span> ((num1&lt;<span class="number">0</span>) <span class="keyword">and</span> (num2&lt;<span class="number">0</span>)):</span><br><span class="line">    flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    flag = <span class="number">-1</span></span><br><span class="line"><span class="comment">#转为列表处理</span></span><br><span class="line">L1 = list(str(abs(num1)))</span><br><span class="line">L2 = list(str(abs(num2)))</span><br><span class="line">L1.reverse()</span><br><span class="line">L2.reverse()</span><br><span class="line">L = []</span><br><span class="line"><span class="comment">#乘法运算的步骤</span></span><br><span class="line">q = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> L1:</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    p = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> L2:</span><br><span class="line">        s += int(i)*int(j)*p*q</span><br><span class="line">        p *= <span class="number">10</span></span><br><span class="line">    q *= <span class="number">10</span></span><br><span class="line">    L.append(s)</span><br><span class="line">result = sum(L)*flag</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.501.png" width="200" hegiht="120"><br><img src="/2018/11/21/some-easy-algorithm01/NO.502.png" width="230" hegiht="120"></p><hr><h4 id="NO-6"><a href="#NO-6" class="headerlink" title="NO.6"></a><strong>NO.6</strong></h4><h5 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h5><p>按要求分解字符串，输入两个数M，N；M代表输入的M串字符串，N代表输出的每串字符串的位数，不够补0。</p><h5 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h5><p>输入：2,8， “abc” ,“123456789“,<br>输出：“abc00000”,“12345678“,”90000000”</p><h5 id="源代码-5"><a href="#源代码-5" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按要求分解字符串，输入两个数M，N；M代表输入的M串字符串，N代表输出的每串字符串的位数，不够补0。</span></span><br><span class="line"><span class="comment"># 例如：输入2,8， “abc” ,“123456789“,则输出为“abc00000”,“12345678“，”90000000”</span></span><br><span class="line">M = int(input(<span class="string">"请输入字符串的数目："</span>))</span><br><span class="line">N = int(input(<span class="string">"请输入每个字符串的长度："</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(M):</span><br><span class="line">    mystr = input(<span class="string">"请输入字符串："</span>)</span><br><span class="line">    <span class="keyword">if</span> len(mystr)&gt;N:</span><br><span class="line">        <span class="keyword">if</span> len(mystr)%N != <span class="number">0</span>:</span><br><span class="line">            mystr = mystr.ljust((int(len(mystr)/N)+<span class="number">1</span>)*N,<span class="string">'0'</span>)</span><br><span class="line">        <span class="comment">#result = re.findall(r'.&#123;3&#125;',mystr)</span></span><br><span class="line">        result =[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range (int(len(mystr)/N)):</span><br><span class="line">            result.append(mystr[i*N:(i+<span class="number">1</span>)*N])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = mystr.ljust(N,<span class="string">'0'</span>)</span><br><span class="line">    print(<span class="string">"第"</span>+str(i+<span class="number">1</span>)+<span class="string">"个字符串操作后的结果为："</span>,result)</span><br></pre></td></tr></table></figure><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.6.png" width="350" hegiht="220"></p><hr><h4 id="NO-7"><a href="#NO-7" class="headerlink" title="NO.7"></a><strong>NO.7</strong></h4><h5 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h5><p>输入一个正整数X，在下面的等式左边的数字之间添加+号或者-号，使得等式成立。<br>1 2 3 4 5 6 7 8 9 = X<br>比如：<br>12-34+5-67+89 = 5   1+23+4-5+6-7-8-9 = 5 </p><h5 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h5><p>输入：5<br>输出：21</p><h5 id="源代码-6"><a href="#源代码-6" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">输入一个正整数X，在下面的等式左边的数字之间添加+号或者-号，使得等式成立。 </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> = X </span><br><span class="line">比如： </span><br><span class="line"><span class="number">12</span><span class="number">-34</span>+<span class="number">5</span><span class="number">-67</span>+<span class="number">89</span> = <span class="number">5</span>   <span class="number">1</span>+<span class="number">23</span>+<span class="number">4</span><span class="number">-5</span>+<span class="number">6</span><span class="number">-7</span><span class="number">-8</span><span class="number">-9</span> = <span class="number">5</span> </span><br><span class="line">请编写程序，统计满足输入整数的所有整数个数。 </span><br><span class="line">输入： 正整数，等式右边的数字  输出： 使该等式成立的个数 </span><br><span class="line">样例输入：<span class="number">5</span>  样例输出：<span class="number">21</span></span><br><span class="line">思路：动态规划，当前种类=符号位加号的种类+符号为减号的种类+没有符号的种类</span><br><span class="line">      ways(before_num,behind_number,temp_result,ex,L)= ways(before_num<span class="number">-1</span>,L[before_num<span class="number">-1</span>],temp_result - behind_number,<span class="number">1</span>,L) + ways(before_num<span class="number">-1</span>,L[before_num<span class="number">-1</span>],temp_result + behind_number,<span class="number">1</span>,L) + ways(before_num<span class="number">-1</span>,L[before_num<span class="number">-1</span>]*pow(<span class="number">10</span>,ex)+behind_number,temp_result,ex+<span class="number">1</span>,L);</span><br><span class="line">      before_num: 需要判定的符号前面的数字的个数，初始为<span class="number">8</span></span><br><span class="line">      behind_number: 需要判定的符号后面的数字，初始为<span class="number">9</span></span><br><span class="line">      temp_result:方程右边的结果</span><br><span class="line">      ex:阶乘数，因为符号有三种可能，加号，减号，或者没有，如果没有，那么ex就用于计算当前值</span><br><span class="line">      L:测试列表</span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ways</span><span class="params">(before_num,behind_number,temp_result,ex,L)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> before_num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> behind_number == temp_result:  <span class="comment">#如果最后等式两边相等，方法+1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ways(before_num<span class="number">-1</span>,L[before_num<span class="number">-1</span>],temp_result - behind_number,<span class="number">1</span>,L) + ways(before_num<span class="number">-1</span>,L[before_num<span class="number">-1</span>],temp_result + behind_number,<span class="number">1</span>,L) + ways(before_num<span class="number">-1</span>,L[before_num<span class="number">-1</span>]*pow(<span class="number">10</span>,ex)+behind_number,temp_result,ex+<span class="number">1</span>,L)</span><br><span class="line"></span><br><span class="line">X = int(input(<span class="string">"请输入一个正整数："</span>))</span><br><span class="line">L = list(range(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">print(<span class="string">"一共有"</span>,ways(len(L)<span class="number">-1</span>,L[<span class="number">-1</span>],X,<span class="number">1</span>,L),<span class="string">"种方法"</span>)</span><br></pre></td></tr></table></figure><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.7.png" width="160" hegiht="100"></p><hr><h4 id="NO-8"><a href="#NO-8" class="headerlink" title="NO.8"></a><strong>NO.8</strong></h4><h5 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h5><p>给定一个字符串，里边可能包含“()”、“[]”、“{}”三种括号，请编写程序检查该字符串中的括号是否成对出现，且嵌套关系正确。<br>true:若括号成对出现且嵌套关系正确，或该字符串中无括号字符；false:若未正确使用括号字符。</p><h5 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h5><p>见运行结果（注意是英文输入）</p><h5 id="源代码-7"><a href="#源代码-7" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">mystr = input(<span class="string">"请输入一个字符串："</span>)</span><br><span class="line">L = [<span class="string">'1'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(mystr)):</span><br><span class="line">    <span class="keyword">if</span> mystr[i] == (<span class="string">'('</span> <span class="keyword">or</span> <span class="string">'['</span> <span class="keyword">or</span> <span class="string">'&#123;'</span>):</span><br><span class="line">        L.append(mystr[i])</span><br><span class="line">    <span class="keyword">elif</span> mystr[i] == <span class="string">')'</span>:</span><br><span class="line">        <span class="keyword">if</span> L[<span class="number">-1</span>] == <span class="string">'('</span>:</span><br><span class="line">            L.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'False'</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="keyword">elif</span> mystr[i] == <span class="string">']'</span>:</span><br><span class="line">        <span class="keyword">if</span> L[<span class="number">-1</span>] == <span class="string">'['</span>:</span><br><span class="line">            L.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'False'</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="keyword">elif</span> mystr[i] == <span class="string">'&#125;'</span>:</span><br><span class="line">        <span class="keyword">if</span> L[<span class="number">-1</span>] == <span class="string">'&#123;'</span>:</span><br><span class="line">            L.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'False'</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line"><span class="keyword">if</span> L == [<span class="string">'1'</span>]:</span><br><span class="line">    print(<span class="string">'True'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'False'</span>)</span><br></pre></td></tr></table></figure><h5 id="运行结果-7"><a href="#运行结果-7" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.801.png" width="240" hegiht="100"><br><img src="/2018/11/21/some-easy-algorithm01/NO.802.png" width="200" hegiht="100"><br><img src="/2018/11/21/some-easy-algorithm01/NO.803.png" width="200" hegiht="100"></p><hr><h4 id="NO-9"><a href="#NO-9" class="headerlink" title="NO.9"></a><strong>NO.9</strong></h4><h5 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h5><p>给定一个M行N列的矩阵（M*N个格子），每个格子中放着一定数量的苹果。<br>你从左上角的各自开始，只能向下或者向右走，目的地是右下角的格子。<br>每走过一个格子，就把格子上的苹果都收集起来。求你最多能收集到多少苹果。<br>注意：当经过一个格子时，需要一次性把格子里的平安果都拿走。<br>限制条件：1&lt;N,M&lt;=50；每个格子里的苹果数量是0到1000（包含0和1000）.<br>输入包含两部分： 第一部分矩阵的行和列：M, N 接下来输入M行，N列的苹果数量 </p><h5 id="样例-6"><a href="#样例-6" class="headerlink" title="样例"></a>样例</h5><p>见运行结果</p><h5 id="源代码-8"><a href="#源代码-8" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">思路：当前位置能够获得的最大苹果数=max(从上面走能够获得最大苹果+从左边走能获得最大苹果）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_apple</span><span class="params">(m,n,num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> m==<span class="number">0</span> <span class="keyword">and</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> m==<span class="number">0</span> <span class="keyword">and</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num[m][n] + sum_apple(m,n - <span class="number">1</span>,num)</span><br><span class="line">    <span class="keyword">elif</span> m&gt;<span class="number">0</span> <span class="keyword">and</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num[m][n] + sum_apple(m - <span class="number">1</span>,n,num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num[m][n] + max(sum_apple(m,n<span class="number">-1</span>,num),sum_apple(m - <span class="number">1</span>,n, num))</span><br><span class="line">M = int(input(<span class="string">"请输入矩阵的行数[0,50]："</span>))</span><br><span class="line">N = int(input(<span class="string">"请输入矩阵的列数[0,50]："</span>))</span><br><span class="line">print(<span class="string">"请输入每个格子的苹果数[0,1000]"</span>)</span><br><span class="line">num = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(M):</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        temp.append(int(input()))</span><br><span class="line">    num.append(temp)</span><br><span class="line">print(<span class="string">"可以获得的最大苹果数是："</span>,sum_apple(M<span class="number">-1</span>,N<span class="number">-1</span>,num))</span><br></pre></td></tr></table></figure><h5 id="运行结果-8"><a href="#运行结果-8" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="/2018/11/21/some-easy-algorithm01/NO.9.png" width="200" hegiht="300"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font face="楷体">后记</font></h2><p>&emsp;&emsp;&ensp;今天就写这么多吧，还是学到了不少东西的。比如正则表达式中{}里面的次数要求是常量，而Python没有定义const类，需要自己定义或另谋出路；对于动态规划问题也有了更深刻的理解，主要是运用递归，可以将复杂的问题简单化；对字符串和列表的操作更加熟练了，并知道了一些以前没有用过的函数用法，果然还是得多练呐😁。<br>&emsp;&emsp;&ensp;虽然很多题目可能都没用到最简洁的算法，但能力还是会一点点提高的，继续努力吧！😉</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>thousand separator</title>
      <link href="/2018/11/19/thousand-separator/"/>
      <url>/2018/11/19/thousand-separator/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font face="楷体">前言</font></h2><p>&emsp;&emsp;&ensp;偶然看到一个简单的算法题，是一个千位分割的问题，就是比如输入12345678，输出12,345,678这种。听说这也是某个企业的面试题，闲来无事就着手实现一下。我先用了C++进行实现，后来换一种思路用了Python实现，最后采用了更为简单的正则表达式，并对负数、小数都加以实现。</p><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a><font face="楷体">C++实现</font></h2><p>&emsp;&emsp;&ensp;由于笔者是个菜鸡，平时很少编程，C++还是大一的时候学了点皮毛，现在基本忘了差不多了🌚，所以用的很不熟练，下面是我实现千位分割问题的代码，如果有可以改进的地方，欢迎指出😉。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;    <span class="keyword">int</span> num,len=<span class="number">0</span>,extra,temp;    <span class="keyword">int</span> level=<span class="number">1</span>;    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个数："</span>;    <span class="built_in">cin</span> &gt;&gt; num;    <span class="comment">//计算输入数字的位数</span>    temp = num;    <span class="keyword">while</span>(temp&gt;<span class="number">0</span>)    &#123;        temp /=<span class="number">10</span>;        len++;        level *=<span class="number">10</span>;    &#125;    extra = len%<span class="number">3</span>;   <span class="comment">//超出3的倍数位的位数</span>    <span class="comment">//输出带有千位分隔符的数字</span>    <span class="keyword">int</span> k=<span class="number">0</span>;    <span class="keyword">while</span>(len&gt;<span class="number">0</span>)    &#123;        level /=<span class="number">10</span>;        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(num/level+<span class="string">'0'</span>); <span class="comment">//输出每一位</span>        num %= level;        k++;        extra--;        len--;        <span class="keyword">if</span>((extra == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">2</span>) || (k == <span class="number">3</span> &amp;&amp; len &gt;<span class="number">0</span>))        &#123;            <span class="built_in">cout</span> &lt;&lt; <span class="string">","</span>;            k = <span class="number">0</span>;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2018/11/19/thousand-separator/9BD365C3762CE03BFBA0F6FE17F9F09F.jpg" alt="9BD365C3762CE03BFBA0F6FE17F9F09F"><br><img src="/2018/11/19/thousand-separator/20BFA4413E1BA985169A765EFE39C883-3.png" alt="20BFA4413E1BA985169A765EFE39"></p><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a><font face="楷体">Python实现</font></h2><p>&emsp;&emsp;&ensp;用C++实现这一简单的问题还是要费一点事的，所以我又转用Python进行了实现，这里我主要是把字符串转变为列表进行了处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num = input(<span class="string">"请输入一个数："</span>)</span><br><span class="line">L =list(num)  <span class="comment">#转变为列表</span></span><br><span class="line">num_length = len(num)   <span class="comment">#数字的位数</span></span><br><span class="line">start = num_length%<span class="number">3</span>    <span class="comment">#超出3的倍数位的位数</span></span><br><span class="line">index = list(range(start,num_length,<span class="number">3</span>))  <span class="comment">#需要插入","的索引值</span></span><br><span class="line">step =<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">    <span class="keyword">if</span> i &gt;<span class="number">0</span>:</span><br><span class="line">        L.insert(i+step,<span class="string">','</span>)</span><br><span class="line">        step = step+<span class="number">1</span></span><br><span class="line">print(<span class="string">""</span>.join(L))    <span class="comment">#列表转字符串</span></span><br></pre></td></tr></table></figure><hr><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2018/11/19/thousand-separator/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-19%20%E4%B8%8B%E5%8D%889.51.53.png" width="200" hegiht="100"><br><img src="/2018/11/19/thousand-separator/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-19%20%E4%B8%8B%E5%8D%889.52.11.png" width="200" hegiht="100"></p><h2 id="正则表达式实现"><a href="#正则表达式实现" class="headerlink" title="正则表达式实现"></a><font face="楷体">正则表达式实现</font></h2><p>&emsp;&emsp;&ensp;读者可能已经发现了，我上述代码的实现对输入的数都要求是<font color="red">正数、整数</font>，要实现正数负数，小数整数都能使用的话，还是需要添加部分代码的，于是这里使用正则表达式来进行实现。<br>&emsp;&emsp;&ensp;据说熟练掌握正则表达式可以节省上百行代码🤔，哈哈，由于这里的问题比较简单，不能充分体现出正则表达式的优势。而且Python的正则表达式引擎是用 C 语言写的，所以效率是十分高，并且<font color="red"><strong>几乎</strong></font>所有的字符串任务均可用正则表达式来实现，所以掌握正则表达式是十分有必要的，大家有时间可以去学习一波🤓。下面就贴出我的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = input(<span class="string">"请输入一个数："</span>)</span><br><span class="line">m = re.search(<span class="string">'\.'</span>, num)</span><br><span class="line"><span class="keyword">if</span> m == <span class="keyword">None</span>:    <span class="comment">#如果是整数</span></span><br><span class="line">    result = re.sub(<span class="string">r"(?&lt;=\d)(?=(\d&#123;3&#125;)+$)"</span>, <span class="string">","</span>, num)</span><br><span class="line"><span class="keyword">else</span>:            <span class="comment">#如果是小数</span></span><br><span class="line">    inte, dec = re.split(<span class="string">'\.'</span>, num)   <span class="comment">#整数、小数分开处理</span></span><br><span class="line">    inte = re.sub(<span class="string">r"(?&lt;=\d)(?=(\d&#123;3&#125;)+$)"</span>, <span class="string">","</span>, inte)</span><br><span class="line">    result = inte + <span class="string">'.'</span> +dec     <span class="comment">#合并</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><hr><h4 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2018/11/19/thousand-separator/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-20%20%E4%B8%8A%E5%8D%8811.11.45.png" width="200" hegiht="100"><br><img src="/2018/11/19/thousand-separator/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-20%20%E4%B8%8A%E5%8D%8811.12.06.png" width="250" hegiht="100"><br><img src="/2018/11/19/thousand-separator/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-20%20%E4%B8%8A%E5%8D%8811.12.45.png" width="260" hegiht="100"><br>&emsp;&emsp;&ensp;可以发现，该程序对负数、小数都能实现千分位分割。正则表达式好处自然很明显，劣势就是不易读，如果不是很熟悉的话很难快速理解该表达式的意思，这里 (?&lt;=\d) 的意思是匹配项前面要有数字，而 (?=(\d{3})+$) 的意思是匹配项后面到结束符要有3的倍数个数字，需要注意的是这里的匹配<font color="red">不消耗字符串的内容</font>，所以原本用作替换的sub函数相当于实现了插入的功能。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font face="楷体">后记</font></h2><p>&emsp;&emsp;&ensp;从上面不同方法的实现，可以看出正则表达式在处理字符串方面的优势，由此可见正则表达式是一个十分重要的技能。其实，像千位分割这种常见的操作，Python怎么会没有函数能够一步到位实现呢🤔？果然，查阅资料后发现，format函数就可以实现这一功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(format(<span class="number">-123456789.12345</span>,<span class="string">','</span>))</span><br></pre></td></tr></table></figure><p>这样就完事啦，是不是非常简单🌚，不过笔者在这里主要是为了强调正则表达式的优势哈哈哈😁，并且这种难读的表达式还需要多多操作啊。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Image Joint</title>
      <link href="/2018/11/19/Image-Joint/"/>
      <url>/2018/11/19/Image-Joint/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font face="楷体">前言</font></h2><p>&emsp;&emsp;&ensp;最近刚学完数字图像处理这门课程，闲来无事，就想编一个图片拼接的程序，代码很简单，如下</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><font face="楷体">源代码</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> im</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">IMAGES_PATH = <span class="string">'/Users/sunxin/Desktop/jointtst'</span>  <span class="comment"># 存放图片的文件夹地址</span></span><br><span class="line">IMAGES_FORMAT = [<span class="string">'.jpg'</span>, <span class="string">'.JPG'</span>,<span class="string">'.jpeg'</span>, <span class="string">'.JPEG'</span>,<span class="string">'.png'</span>,<span class="string">'.PNG'</span>]  <span class="comment"># 图片扩展名</span></span><br><span class="line">IMAGE_HEIGHT = <span class="number">400</span> <span class="comment"># 每张小图片的高</span></span><br><span class="line">IMAGE_WIDTH = <span class="number">400</span> <span class="comment"># 每张小图片的宽</span></span><br><span class="line">IMAGE_ROW = <span class="number">3</span>  <span class="comment"># 合成图片的行</span></span><br><span class="line">IMAGE_COLUMN = <span class="number">3</span>  <span class="comment"># 合成图片的列</span></span><br><span class="line">IMAGE_SAVE_PATH = <span class="string">'/Users/sunxin/Desktop/jointtst/final/nba_logo.jpg'</span>  <span class="comment"># 图片合成后保存的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片集地址下的所有图片名称</span></span><br><span class="line">image_names = [name <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(IMAGES_PATH) <span class="keyword">for</span> item <span class="keyword">in</span> IMAGES_FORMAT <span class="keyword">if</span></span><br><span class="line">               os.path.splitext(name)[<span class="number">1</span>] == item]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Tips：</span></span><br><span class="line"><span class="string">os.path.splitext()将文件名和扩展名分开</span></span><br><span class="line"><span class="string">os.path.split()返回文件的路径和文件名</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 若文件夹中所含图片数目不等于期望拼接的图片数目，报错</span></span><br><span class="line"><span class="keyword">if</span> len(image_names) != IMAGE_ROW * IMAGE_COLUMN:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"请核对需要拼接的图片数目！"</span>)</span><br><span class="line"><span class="comment"># 图像拼接函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Image_joint</span><span class="params">()</span>:</span></span><br><span class="line">    to_image = im.new(<span class="string">'RGB'</span>, (IMAGE_COLUMN * IMAGE_WIDTH, IMAGE_ROW * IMAGE_HEIGHT))  <span class="comment"># 创建一个新图</span></span><br><span class="line">    <span class="comment"># 循环遍历，把每张图片按顺序粘贴到对应位置上</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(IMAGE_ROW ):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(IMAGE_COLUMN):</span><br><span class="line">            from_image = im.open(os.path.join(IMAGES_PATH,image_names[IMAGE_COLUMN * y + x])).resize(</span><br><span class="line">                (IMAGE_WIDTH, IMAGE_HEIGHT), im.ANTIALIAS)</span><br><span class="line">            to_image.paste(from_image, (x * IMAGE_WIDTH, y * IMAGE_HEIGHT))</span><br><span class="line">    <span class="keyword">return</span> to_image.save(IMAGE_SAVE_PATH)  <span class="comment"># 生成新图</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Tips：</span></span><br><span class="line"><span class="string">注意os.path.join和直接使用字符串'+'的区别（少一个'/'）</span></span><br><span class="line"><span class="string">NEAREST（使用最近邻居）</span></span><br><span class="line"><span class="string">BILINEAR（2x2环境中的线性插值）</span></span><br><span class="line"><span class="string">BICUBIC（4x4环境中的三次样条插值）</span></span><br><span class="line"><span class="string">ANTIALIAS（高质量的下采样滤波器）</span></span><br><span class="line"><span class="string">paste函数的参数为(需要修改的图片，粘贴的起始点的横坐标，粘贴的起始点的纵坐标）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">Image_joint()</span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a><font face="楷体">实现效果</font></h2><p>&emsp;&emsp;&ensp;我是将九张不同NBA球队的logo拼接成一个九宫格的形式，拼接前，各个文件如下：<br><img src="/2018/11/19/Image-Joint/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-19%20%E4%B8%8A%E5%8D%8811.30.53.png" alt="屏幕快照 2018-11-19 上午11.30.53"><br>&emsp;&emsp;&ensp;运行之后，可将新生成的图片保存到final文件夹之下，得到拼接后的图片为：<br><img src="/2018/11/19/Image-Joint/nba_logo.jpg" alt="nba_logo"><br>&emsp;&emsp;&ensp;这样就完成了图片的拼接。需要注意的是，这九张图的大小不一定需要完全一样，我的这九张图的分辨率就不一样，程序中用插值法统一将每个图片的大小重新调整为400*400，于是可以很容易对调整后的图片进行操作。不同的插值法得到的效果不一样，这里采用的是高质量的下采样滤波器。由于原来九张图的高和宽原本不一定相同，现在全部调整为400，所以导致了有些logo看起来被拉高或者是拉宽了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bias-variance</title>
      <link href="/2018/11/18/bias-variance/"/>
      <url>/2018/11/18/bias-variance/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font face="楷体">前言</font></h2><p>&emsp;&emsp;&ensp;昨天看书看到了“偏差和方差”这个字眼，想了一会心中没有得出确切的答案，明明前一阵子才在西瓜书中看过相关概念，现在知识点已经模糊，不仅感叹重温的必要性🌚，于是又把书翻出来重看了一遍，并决定把这块知识点写成博客，加强自己的理解和记忆。在写博客的过程中，我又上网查阅了相关的知识点，看了别人的博客，收获了和书中不一样的解释方式，结合图形更易理解，所以啊，写博客还是颇有收获的😁。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><font face="楷体">基本概念</font></h2><p>&emsp;&emsp;&ensp;这一部分我参考的是周志华的西瓜书，书中是通过对期望泛化误差的分解，用公式的推导进而解释偏差、方差以及噪声的概念。这里，我不作推导，但仍用书中的符号进行表示，首先给出相关概念的符号表示</p><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">$\boldsymbol x$</td><td style="text-align:center">测试样本</td></tr><tr><td style="text-align:center">$ D $</td><td style="text-align:center">训练集</td></tr><tr><td style="text-align:center">$y_D$</td><td style="text-align:center">$\boldsymbol x$在数据集中的标记</td></tr><tr><td style="text-align:center">$y$</td><td style="text-align:center">$\boldsymbol x$的真实标记</td></tr><tr><td style="text-align:center">$f(\boldsymbol x;D)$</td><td style="text-align:center">训练集$D$上学得模型$f$在$\boldsymbol x$上的预测输出</td></tr><tr><td style="text-align:center">$\hat{f}(\boldsymbol x)$</td><td style="text-align:center">期望预测</td></tr><tr><td style="text-align:center">$var(\boldsymbol x)$</td><td style="text-align:center">使用样本数相同的不同训练集产生的方差</td></tr><tr><td style="text-align:center">$\epsilon^2$</td><td style="text-align:center">噪声</td></tr><tr><td style="text-align:center">$bias^2(\boldsymbol x)$</td><td style="text-align:center">偏差</td></tr></tbody></table></div><p>其中，学习算法的期望预测为</p><script type="math/tex; mode=display">\hat{f}(\boldsymbol x) = E_D[f(\boldsymbol x;D)]</script><p>算法的期望泛化误差为</p><script type="math/tex; mode=display">E(f;D) = E_D[(f(\boldsymbol x;D)-y_D)^2]</script><p>假定噪声期望为零，即</p><script type="math/tex; mode=display">E_D[y_D-y] = 0</script><p>对泛化误差进行分解，最终可以得到</p><script type="math/tex; mode=display">E(f;D) = E_D[(f(\boldsymbol x;D)-\hat{f}(\boldsymbol x))^2]+(\hat{f}(\boldsymbol x)-y)^2+E_D[(y_D-y)^2]</script><p>于是，</p><script type="math/tex; mode=display">E(f;D) = bias^2(\boldsymbol x)+var(\boldsymbol x)+\epsilon^2</script><p>也就是说，泛化误差可以分解为偏差、方差与噪声之和。</p><p>再来看偏差、方差、噪声它们各自的含义：</p><ul><li>偏差：<script type="math/tex">bias^2(\boldsymbol x)=(\hat{f}(\boldsymbol x)-y)^2</script><br>度量了学习算法的期望预测与真实结果的偏离程度，刻画了学习算法本身的<font color="red">拟合能力</font>。</li><li>方差 ：<script type="math/tex">var(\boldsymbol x)=E_D[(f(\boldsymbol x;D)-\hat{f}(\boldsymbol x))^2]</script><br>度量了同样大小的训练集的变动所导致的学习性能的变化，刻画了<font color="red">数据扰动所造成的影响</font>。</li><li>噪声：<script type="math/tex">\epsilon^2=E_D[(y_D-y)^2]</script><br>表达了在当前任务上任何学习算法所能达到的期望泛化误差的下界，刻画了学习问题<font color="red">本身的难度</font>。<br>&emsp;&emsp;&ensp;综上，泛化性能是由学习算法的能力、数据的充分性以及学习任务本身的难度所共同决定的，为了取得好的泛化性能，需要使偏差较小，能够充分拟合数据，也要使方差较小，使得数据扰动产生的影响小。</li></ul><hr><p>&emsp;&emsp;&ensp;以上是我在书中获得的解释，后来我又在某些<a href="http://scott.fortmann-roe.com/docs/BiasVariance.html" target="_blank" rel="noopener">博客</a>中看到了更加直观的图形解释。<br><img src="/2018/11/18/bias-variance/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-18%20%E4%B8%8A%E5%8D%8810.25.32.png" alt="屏幕快照 2018-11-18 上午10.25.32"><br>&emsp;&emsp;&ensp;如图，我们可以使用靶心图创建偏差和方差的图形可视化。目标的中心是一个完美预测正确值的模型，随着我们远离靶心，我们的预测变得越来越糟，我们可以重复整个模型构建过程，以便在目标上获得许多单独的命中。有时我们会得到很好的训练数据分布，所以我们预测得很好，且接近靶心，而有时我们的训练数据可能充满了异常值或非标准值，导致预测较差，这些不同的实现导致目标上的命中分散。</p><h2 id="偏差-方差窘境"><a href="#偏差-方差窘境" class="headerlink" title="偏差-方差窘境"></a><font face="楷体">偏差-方差窘境</font></h2><p>&emsp;&emsp;&ensp;一般，偏差和方差是有冲突的，称为偏差-方差窘境（bias-variance dilemma）在训练不足时，学习器的拟合能力不够强，训练数据的扰动不足以使学习器产生显著变化，此时偏差主导了泛化错误率。随着训练程度的加深，学习器的拟合能力逐渐增强，训练数据发生的扰动渐渐能被学习器学到，方差逐渐主导了泛化错误率。训练程度充足后，学习器的拟合能力已非常强，训练数据发生的轻微扰动都会导致学习器发生显著的变化，若训练数据自身的、非全局的特性被学习器学到了，则将发生过拟合。下面的这张图正好说明了这点<br><img src="/2018/11/18/bias-variance/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-18%20%E4%B8%8A%E5%8D%8810.25.13.png" alt="屏幕快照 2018-11-18 上午10.25.13"><br>&emsp;&emsp;&ensp;其实，处理偏差和方差实际上是关于处理过度拟合和欠拟合。随着越来越多的参数被添加到模型中，模型的复杂性上升，变化成为我们首要关注的问题，所以方差变大，而偏差则逐渐下降。<br>&emsp;&emsp;&ensp;正如上一节的那张图所示，欠拟合实际上对应的是高偏差，而过拟合对应的又是高方差。而我们的目的是要寻找使得泛化误差取得最小值的那个最佳点，这就需要让偏差和方差在一定程度上折中取值。</p><h2 id="偏差-方差折中"><a href="#偏差-方差折中" class="headerlink" title="偏差-方差折中"></a><font face="楷体">偏差-方差折中</font></h2><p>&emsp;&emsp;&ensp;很多算法都是可以控制训练程度的，比如决策树可以控制层数，神经网络可以控制训练轮数，集成学习的方法可控制基学习器的个数。<br>&emsp;&emsp;&ensp;我看到偏差-方差折中这一概念是在《机器学习实战》这本书中遇到的，那一章节主要讲了回归。书中提到，线性回归容易发生欠拟合，因为它求的是具有最小均方误差的无偏估计，而我们可以在估计中引入一些偏差用来降低预测的均方误差，有一个方法就是<font color="red">局部加权线性回归</font>。这里不作介绍，感兴趣的小伙伴可以阅读《机器学习实战》的8.2节，得出的结论是选取的核越小，模型复杂度就越高，可以增大方差减小偏差。而当模型十分复杂以至于发生了过拟合时，可以采用缩减法，将一些系数进行缩减，可以减少模型的复杂度，降低方差。书中8.3节和8.4节主要介绍了<font color="red">岭回归、lasso法和前向逐步回归法</font>这些缩减方法，并且结合实例进行了分析，感兴趣的小伙伴可以详细阅读。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font face="楷体">后记</font></h2><p>&emsp;&emsp;&ensp;花了点时间，总算对偏差和方差的概念又加深了一遍印象，以后还是要注意温故而知新呐🌝。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Decorate my Blog</title>
      <link href="/2018/11/16/Decorate-my-Blog/"/>
      <url>/2018/11/16/Decorate-my-Blog/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;&ensp;折腾了两天总算把自己的博客装饰地像个样子了🙃，现在就来整理一下借鉴了哪些资料吧。<br>&emsp;&emsp;&ensp;一篇来自<a href="https://blog.csdn.net/com_ma/article/details/76039859" target="_blank" rel="noopener">CSDN</a>，一篇来自<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">简书</a>，两篇介绍的都是NexT主题的使用，介绍的设置功能比较多，笔者因为懒癌晚期就选了几个自己觉得还不错的进行了实际操作，操作过程中发现两个都有点小毛病，但是结合起来，再加上自己的摸爬滚打，还是可以成功地把自己的博客装饰的像个样的🌚。<br>&emsp;&emsp;&ensp;上面两篇文章提到的网易云跟帖已经关闭，改用了来必力，不过我对此不是很感兴趣……jiathis分享目前也停止了服务，但是<a href="https://asdfv1929.github.io/2018/05/25/baidu-share/" target="_blank" rel="noopener">百度</a>当然依旧坚挺……多说评论也被勒令停止服务，可以改用<a href="https://sjq597.github.io/2018/05/18/Hexo-%E4%BD%BF%E7%94%A8Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">Gitment</a>进行评论功能的实现。还有还有，统计全站总访问量的不蒜子，因为七牛强制过期原有的域名，现在也改了操作，不过很简单，直接看<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">解决方法</a>。另外，笔者在设置头像的过程中，跟着上面两篇的介绍虽然设置了美美的头像🤓，但换了一台电脑居然无法显示，于是又借鉴了<a href="https://blog.csdn.net/qq_30242609/article/details/53440869" target="_blank" rel="noopener">这篇文章</a>，把问题解决了。<br>&emsp;&emsp;&ensp;还有很多功能都没尝试操作，感兴趣的小伙伴们可以再折腾一波😁。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>F107 Calculate</title>
      <link href="/2018/11/14/F107-Calculate/"/>
      <url>/2018/11/14/F107-Calculate/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font face="楷体">前言</font></h2><p>&emsp;&emsp;&ensp;首先，要说明的是这只一个很简单的小任务，只涉及到简单的数据处理，界面设计和可执行文件的生成。那么，为什么笔者能长篇大论地写出这么多废话呢🌝，一是刚搭建好自己的博客，心血来潮、三分钟热度，想把自己的第一篇博客写的像个样子🙃，二来也是为了熟悉熟悉Markdown这个很好的写作语言，锻炼锻炼表达能力和总结能力，三来就是因为太闲了，学习是不可能学习的，这辈子都不想学习，只能写写博客找点事做给自己心灵一点安慰🌚。好了，下面就开始说说我这个小任务吧。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><font face="楷体">背景</font></h2><p>&emsp;&emsp;&ensp;由于项目设计被随机分到了一个做微波方向的老师那，有了个比较高大上的项目名称——超材料阵列天线及其在射电望远镜中的应用🤔。当然，对于没学过微波、天线等各种专业课的渣渣，拿到这个题目肯定是一脸懵逼🌚，万幸老师了解到我的研究生方向是图像处理，于是给我先分配了一个数据处理的任务。废话不多说，这次的任务是根据按照某种规则存放在文件中已经测得的数据，通过公式计算得到太阳射电指数F107，那么先简单介绍一下这个高大上的名词吧🙃。</p><h2 id="关于F107"><a href="#关于F107" class="headerlink" title="关于F107"></a><font face="楷体">关于F107</font></h2><p>&emsp;&emsp;&ensp;太阳F107指数，就是太阳10.7厘米波长（2800-2840MHz，视无线电环境而定）的射电辐射通量，是表征太阳活动水平的一个重要参量，和黑子的变化具有很高的相关性，足以反映太阳长期活动和日地效应的变化。其单位为S.F.U（太阳流量单位，Solar Flux Unit），1S.F.U=10-22w Hz-1m-2，其一般范围在60到300之间。平均F107指数高于180的年份称为典型的太阳活动峰年，平均F107指数低于90的年份称为典型的太阳活动谷年。因此，常用F107 指数划分太阳活动的总体水平。<br>&emsp;&emsp;&ensp;目前国家气象局卫星气象中心在山东荣成石岛建有能观测F107指数的太阳射电望远镜，定标过程分为三个步骤：<br>第一步： 天线对准太阳跟观测记录数据；每3分钟形成一个数据文件；<br>第二步： 天线偏离太阳两度，并开启噪声源记录3分钟，形成一个文件；<br>第三步： 接收机关闭噪声源，并记录数据3分钟，形成一个文件；<br>&emsp;&emsp;&ensp;执行完上述三步后，噪声源关闭，天线重新对准太阳进行跟踪。上述步骤分别在每天观测的9:00、12:00:和15：00进行三次。<br>&emsp;&emsp;&ensp;然后，我们就可以从每天的观测文件中提取出三个信息量，分别是：$ R_S $（太阳）、$ R_N $（噪声源）、$ R_B $（冷空），再通过公式:</p><script type="math/tex; mode=display">S=S_0（R_S—R_B）/（R_N）</script><p>就可以求得太阳射电流量，其中$ S_0 $为修正系数。<br>&emsp;&emsp;&ensp;说了这么多，你可能一头雾水，没事，我也什么都不懂🌚，但是我们的任务很简单，就是通过简单的文件操作，把测得的数据整理成自己想要的模样，再通过上述提到的非常简单的公式计算出$ S_0$，通过长期的$ S_0 $得到最佳的修正系数，由于老师只给了我几天有用的测量数据 (其实给了一堆，后来发现很多天机器在维修，数据都没有用🙃)，我就直接采取求平均值的方法得到了看似最佳的最佳修正系数🌝，数据多的话可以采用机器学习的方法，当然，不在本文的讨论范围内，最后再把写好的文件生成一个在其他电脑上可执行的exe就OK了(博主用的是Mac，所以生成的是OS系统下的APP，后续也会提及exe和APP的生成方法)。</p><h2 id="任务要求及描述"><a href="#任务要求及描述" class="headerlink" title="任务要求及描述"></a><font face="楷体">任务要求及描述</font></h2><p>&emsp;&emsp;&ensp;现在，我们可以从<a href="http://www.sepc.ac.cn" target="_blank" rel="noopener">空间环境预报中心</a>查询到每天的F107指数，然后就可以<strong>通过石岛望远镜观测的每天记录数据，求得本望远镜系统的$S_0$参数，并统计长期的$S_0$的稳定性情况，最后求得最佳$S_0$</strong>，用于石岛望远镜每天自动计算F107指数。另外，要求有自动导入数据分析功能，即<strong>生成一个exe文件</strong>，通过选择文件夹的方式导入一天的所有观测数据，直接计算出当天的F107指数$ S $，并显示在屏幕上。<br>&emsp;&emsp;&ensp;那么，我得到的原始数据是什么样的呢？老师给我发了一个文件夹，记录了今年10月1日至11月6日的所有观测数据(emmm，后来发现由于机器故障，只有10月25日至11月6日的数据可用🌚)</p><p><center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-14%20%E4%B8%8B%E5%8D%887.20.59-3.png" width="100" hegiht="100"></center>&emsp;&emsp;&ensp;打开这个文件夹就惊了，竟然包含了7350个txt文件……先来看看这些文件是怎么命名的吧，随便选取一个</p><p><center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-14%20%E4%B8%8B%E5%8D%8811.51.51-1.png" width="100" hegiht="100"></center>&emsp;&emsp;&ensp;前面一串英文是什么？这不重要，我门只需关注中间的一段数字即可，这个文档的数字是20181101144002，表示的是这是2018年11月01日14时40分02秒生成的记录数据文件，文件中包含了大约三分钟的记录数据。我们再将这个文档打开，哇，又是一堆数据，我们截取部分<center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-15%20%E4%B8%8A%E5%8D%8812.01.51.png" width="500" hegiht="500"></center>&emsp;&emsp;&ensp;好了，这些数据具体是什么意思呢？我也没关注一共有多少行，反正就是3分钟左右的数据量就是了，显而易见，第一列数据表示的年月日，第二列表示的时分秒，第三列我也不晓得是啥，反正不重要😂，4、5、6列就是我们记录的数据，分别是在2801MHz±5MHz, 4554MHz±5MHz以及9081MHz±5MHz的采集数据，根据之前F107指数的介绍，我们这里只需关注第4列数据，至于最后一列数据，既然用不到，管它干啥🙃。那么，这么多的记录数据，哪些是太阳数据$ R_S $，哪些是噪声源数据$ R_N $，又是哪些是冷空数据$ R_B $呢？咨询过老师得知，每天的9：00：00-9：02：59，12：00：00-12：02：59，15：00：00-15：02：59的所有数据是噪声源数据$ R_N $，9：03：00-9：05：59，12：03：00-12：05：59，15：03：00-15：05：59的所有数据是冷空$ R_B $，其余的所有数据是太阳数据$ R_S $，这下思路就很明了了，只需提取出当天的$ R_S $、$ R_N $和$ R_B $，那么什么问题都不在话下🤓。</p><h2 id="思路及实现"><a href="#思路及实现" class="headerlink" title="思路及实现"></a><font face="楷体">思路及实现</font></h2><p>&emsp;&emsp;&ensp;先给出我的<a href="https://github.com/Huntersxsx/F107test.git" target="_blank" rel="noopener">代码</a>，很简单，都是基础的Python，稍微难懂的都加了注释，所以这里就只提个思路就好。由于笔者刚接触Python没多久，所以很多地方都没有优化，写的不好请见谅😉。哦哦，至于老师发给我的那些观测数据，因为老师说那是机密文件🤔，所以我就不上传了吧😂。</p><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p>&emsp;&emsp;&ensp;首先，我们要将这些堆杂在一起的文档按日期进行整合，即把属于一天的所有数据合并到一个文件中，形成这样的一种形式<center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-15%20%E4%B8%8A%E5%8D%8812.35.32.png" width="500" hegiht="500"></center>&emsp;&emsp;&ensp;实现起来很简单，我代码中的CombFile( )函数就实现了该功能，后来，老师给我说当时给我的文件是特殊情况🌚，以后需要处理的数据如下面这种样式，即已经按日期分类好，但没有进行整合<center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-15%20%E4%B8%8A%E5%8D%8812.40.24.png" width="400" hegiht="400"></center>&emsp;&emsp;&ensp;没事，那样更简单，我的CombFile02( )就实现了整合的功能。整合得到当天的testdata之后，那么一切都变得简单了，函数GetR( )将数据进行划分，得到当天所有的$ R_S $、$R_N$和$ R_B $数据，函数calS0( )再根据$ S $和$ S_0 $之间的公式关系，以及官网查得的数据$ S $，即可计算得出当天的$ S_0 $，计算出多天的$S_0$，我们这里就简单地去个平均，作为我们的最佳修正系数，之后，再用函数PredictS( )，也就是calS0( )的逆过程，把最佳修正系数作为当天的$ S_0 $，就可以预测出当天的$ S $，可以和官网公布的数据进行比较，看看误差，当然，由于训练样本太小，仅仅采用取平均的方法，误差肯定有些偏大🌚，没事……笔者不在乎，重在体验😂。<br>&emsp;&emsp;&ensp;哇，到这里数据处理部分就这么结束了？可见这个项目是有多简单🌝，我还在这里兴致勃勃地长篇大论……好了，下面就剩下用户界面和生成一个可执行文件了。</p><h4 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h4><p>&emsp;&emsp;&ensp;这里主要用的Python自带的tkinter库，在制图方面很有用，有兴趣的朋友可以自己学习一个。我们这里用到的就很简单了，一个Button产生按钮，filedialog用作显示对话框，提示用户打开文件夹，最后再用messagebox来显示计算结果就OK了。我们运行一下看看是什么样子<center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-15%20%E4%B8%8A%E5%8D%8810.13.37.png" width="300" hegiht="300"></center>&emsp;&emsp;&ensp;可以看到出现了一个对话框，然后我们点击对话框中的按钮，就可以进行选择文件夹了<center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-15%20%E4%B8%8A%E5%8D%8810.11.44.png" width="300" hegiht="300"></center>&emsp;&emsp;&ensp;随意选取一个文件夹，就可以计算出结果啦！<center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-15%20%E4%B8%8A%E5%8D%8810.11.58.png" width="300" hegiht="300"></center>&emsp;&emsp;&ensp;结果是多少不重要，反正是实现了任务要求了🤓。好了一个简单的项目到此就基本结束了，下面就来生成一个可执行的文件，可以用于其他没有安装Python及相关库的上位机中。</p><h4 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h4><h6 id="Mac-OS系统"><a href="#Mac-OS系统" class="headerlink" title="Mac OS系统"></a>Mac OS系统</h6><p>&emsp;&emsp;&ensp;这一块我是实在不想写的……捣鼓了那么久最后也没捣鼓出来，主要用到的是py2app，看了很多博客、论坛，都是大同小异，可以根据<a href="https://jingyan.baidu.com/article/f79b7cb31a9f0d9144023ea8.html" target="_blank" rel="noopener">这篇</a>操作一波，当然里面是没有涉及到遇到的各种bug的，如果你能一帆风顺地完成，emmm那么就很简单了😂。期间我遇到了各种奇葩的bug，不知道是环境还是啥问题，找了小伙伴来也没能解决，最后自己一顿骚操作，居然生成了一个APP，把我激动地半天，我还给这个APP加了一个图标，附加了其他相关信息<center><img src="/2018/11/14/F107-Calculate/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-15%20%E4%B8%8A%E5%8D%8810.47.54.png" width="80" hegiht="80"></center><br>&emsp;&emsp;&ensp;最后发现这玩意只能在我的Mac上运行，在其他的Mac上就GG了🌚，不管了，放弃了，我就是这么懒🙃。<br>&emsp;&emsp;&ensp;有兴趣的小伙伴可以跟着教程操作一波，简书里的<a href="https://www.jianshu.com/p/afb6b2b97ce9" target="_blank" rel="noopener">这篇文章</a>写的就很详细了，介绍了如何添加图标，加入版本，版权等信息。另外推荐一个<a href="https://www.iconfinder.com/icon-sets/featured/free/1" target="_blank" rel="noopener">网站</a>，里面有很多有趣的图标可供选择。</p><h6 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h6><p>&emsp;&emsp;&ensp;在Mac OS系统下倒腾失败后，我又开始倒腾Windows……查阅相关介绍后，发现在Windows下有两种生成方式，一个就是和py2app很像的py2exe了……网上介绍很简单，但是有心理阴影的我又没搞出来🙃，后来发现py2exe已经十多年没更新了……出各种bug可能也是难免的吧。所以当然就要推荐第二种方法了——<a href="https://blog.csdn.net/mrlevo520/article/details/51840217" target="_blank" rel="noopener">pyinstalller</a>，真的是简单又方便，同样，这里也包含了很多命令可以添加图标之类的各种信息。当然，要想把图标做的更完美，还是需要修改一些文件内容的，可以综合参考一下<a href="https://blog.csdn.net/lion_cui/article/details/51329497" target="_blank" rel="noopener">这篇文章</a>和<a href="https://www.cnblogs.com/d0main/p/7444837.html" target="_blank" rel="noopener">这一篇</a>，最终，我终于生成了一个exe<br><img src="/2018/11/14/F107-Calculate/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%9B%BE%E6%A0%87.jpg" width="80" hegiht="80"><img src="/2018/11/14/F107-Calculate/%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE.jpg" width="200" hegiht="200"><img src="/2018/11/14/F107-Calculate/%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%9B%BE%E6%A0%87.jpg" width="80" hegiht="80"><br>&emsp;&emsp;&ensp;第一张图是文件存放在桌面或者文件夹中的显示图标。第二张图是运行之后的对话窗口，同样具有按钮，细心的小伙伴还会发现在对话窗口的左上角还有一个小太阳，没错，这就是完善图标后的效果，对应的就是第三张图在任务栏中显示的图标，同样也是一个小太阳。于是在Windows下的可执行文件就生成啦。<br>&emsp;&emsp;&ensp;在其他上位机测试过也可以执行，终于完事了……天呐，我实在太菜了，捣鼓了这么久才弄出来🌚，没事，重在折腾……</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font face="楷体">后记</font></h2><p>&emsp;&emsp;&ensp;把可执行文件发给老师之后也就算完成任务了，闲下来的我花了点时间学了点GitHUb，又搭了一个HEXO博客，然后写下了这篇废话连篇的博客。这篇博客断断续续竟然写了两天，真的敬佩那些坚持每周一更的大牛们，而且还是高质量的文章，自己也不晓得能不能坚持……emmm，继续努力吧😂，未来的路还很长，道阻且长，行则将至，共勉。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FirstBlog</title>
      <link href="/2018/11/13/FirstBlog/"/>
      <url>/2018/11/13/FirstBlog/</url>
      
        <content type="html"><![CDATA[<p>&emsp;哈哈哈，终于把HEXO搭建好啦！！！👏👏👏<br>&emsp;这两天学习了一下Markdown，GitHub的基本操作，并搭建好了HEXO，过会再学习一下HEXO的使用。😉<br>&emsp;几天主要跟着<a href="https://blog.csdn.net/googdev/article/details/54619274?locationNum=2&amp;fps=1" target="_blank" rel="noopener">从0开始学习GitHub系列</a>学习的是这篇文章，作者<a href="http://stormzhang.com" target="_blank" rel="noopener">张帅</a>写的很好呐，受益匪浅，作为一个即将毕业的大四🐶，感觉真的是相见恨晚呐。文章写的这么好，想必人一定很帅吧（手动狗头）哈哈哈。<br>&emsp;先说这么多，明早还要早起上一周里唯一的一节课，哈哈，身为大四🐶唯一早起的理由了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/13/hello-world/"/>
      <url>/2018/11/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chat </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
