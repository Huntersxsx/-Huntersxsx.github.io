<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[F107 Calculate]]></title>
    <url>%2F2018%2F11%2F14%2FF107-Calculate%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;&ensp;首先，要说明的是这只一个很简单的小任务，只涉及到简单的数据处理，界面设计和可执行文件的生成。那么，为什么笔者能长篇大论地写出这么多废话呢🌝，一是刚搭建好自己的博客，心血来潮、三分钟热度，想把自己的第一篇博客写的像个样子🙃，二来也是为了熟悉熟悉Markdown这个很好的写作语言，锻炼锻炼表达能力和总结能力，三来就是因为太闲了，学习是不可能学习的，这辈子都不想学习，只能写写博客找点事做给自己心灵一点安慰🌚。好了，下面就开始说说我这个小任务吧。 背景&emsp;&emsp;&ensp;由于项目设计被随机分到了一个做微波方向的老师那，有了个比较高大上的项目名称——超材料阵列天线及其在射电望远镜中的应用🤔。当然，对于没学过微波、天线等各种专业课的渣渣，拿到这个题目肯定是一脸懵逼🌚，万幸老师了解到我的研究生方向是图像处理，于是给我先分配了一个数据处理的任务。废话不多说，这次的任务是根据按照某种规则存放在文件中已经测得的数据，通过公式计算得到太阳射电指数F107，那么先简单介绍一下这个高大上的名词吧🙃。 关于F107&emsp;&emsp;&ensp;太阳F107指数，就是太阳10.7厘米波长（2800-2840MHz，视无线电环境而定）的射电辐射通量，是表征太阳活动水平的一个重要参量，和黑子的变化具有很高的相关性，足以反映太阳长期活动和日地效应的变化。其单位为S.F.U（太阳流量单位，Solar Flux Unit），1S.F.U=10-22w Hz-1m-2，其一般范围在60到300之间。平均F107指数高于180的年份称为典型的太阳活动峰年，平均F107指数低于90的年份称为典型的太阳活动谷年。因此，常用F107 指数划分太阳活动的总体水平。&emsp;&emsp;&ensp;目前国家气象局卫星气象中心在山东荣成石岛建有能观测F107指数的太阳射电望远镜，定标过程分为三个步骤：第一步： 天线对准太阳跟观测记录数据；每3分钟形成一个数据文件；第二步： 天线偏离太阳两度，并开启噪声源记录3分钟，形成一个文件；第三步： 接收机关闭噪声源，并记录数据3分钟，形成一个文件；&emsp;&emsp;&ensp;执行完上述三步后，噪声源关闭，天线重新对准太阳进行跟踪。上述步骤分别在每天观测的9:00、12:00:和15：00进行三次。&emsp;&emsp;&ensp;然后，我们就可以从每天的观测文件中提取出三个信息量，分别是：$ R_S $（太阳）、$ R_N $（噪声源）、$ R_B $（冷空），再通过公式:$$ S=S_0（R_S—R_B）/（R_N）$$就可以求得太阳射电流量，其中$ S_0 $为修正系数。&emsp;&emsp;&ensp;说了这么多，你可能一头雾水，没事，我也什么都不懂🌚，但是我们的任务很简单，就是通过简单的文件操作，把测得的数据整理成自己想要的模样，再通过上述提到的非常简单的公式计算出$ S_0$，通过长期的$ S_0 $得到最佳的修正系数，由于老师只给了我几天有用的测量数据 (其实给了一堆，后来发现很多天机器在维修，数据都没有用🙃)，我就直接采取求平均值的方法得到了看似最佳的最佳修正系数🌝，数据多的话可以采用机器学习的方法，当然，不在本文的讨论范围内，最后再把写好的文件生成一个在其他电脑上可执行的exe就OK了(博主用的是Mac，所以生成的是OS系统下的APP，后续也会提及exe和APP的生成方法)。 任务要求及描述&emsp;&emsp;&ensp;现在，我们可以从空间环境预报中心查询到每天的F107指数，然后就可以通过石岛望远镜观测的每天记录数据，求得本望远镜系统的$S_0$参数，并统计长期的$S_0$的稳定性情况，最后求得最佳$S_0$，用于石岛望远镜每天自动计算F107指数。另外，要求有自动导入数据分析功能，即生成一个exe文件，通过选择文件夹的方式导入一天的所有观测数据，直接计算出当天的F107指数$ S $，并显示在屏幕上。&emsp;&emsp;&ensp;那么，我得到的原始数据是什么样的呢？老师给我发了一个文件夹，记录了今年10月1日至11月6日的所有观测数据(emmm，后来发现由于机器故障，只有10月25日至11月6日的数据可用🌚) &emsp;&emsp;&ensp;打开这个文件夹就惊了，竟然包含了7350个txt文件……先来看看这些文件是怎么命名的吧，随便选取一个 &emsp;&emsp;&ensp;前面一串英文是什么？这不重要，我门只需关注中间的一段数字即可，这个文档的数字是20181101144002，表示的是这是2018年11月01日14时40分02秒生成的记录数据文件，文件中包含了大约三分钟的记录数据。我们再将这个文档打开，哇，又是一堆数据，我们截取部分&emsp;&emsp;&ensp;好了，这些数据具体是什么意思呢？我也没关注一共有多少行，反正就是3分钟左右的数据量就是了，显而易见，第一列数据表示的年月日，第二列表示的时分秒，第三列我也不晓得是啥，反正不重要😂，4、5、6列就是我们记录的数据，分别是在2801MHz±5MHz, 4554MHz±5MHz以及9081MHz±5MHz的采集数据，根据之前F107指数的介绍，我们这里只需关注第4列数据，至于最后一列数据，既然用不到，管它干啥🙃。那么，这么多的记录数据，哪些是太阳数据$ R_S $，哪些是噪声源数据$ R_N $，又是哪些是冷空数据$ R_B $呢？咨询过老师得知，每天的9：00：00-9：02：59，12：00：00-12：02：59，15：00：00-15：02：59的所有数据是噪声源数据$ R_N $，9：03：00-9：05：59，12：03：00-12：05：59，15：03：00-15：05：59的所有数据是冷空$ R_B $，其余的所有数据是太阳数据$ R_S $，这下思路就很明了了，只需提取出当天的$ R_S $、$ R_N $和$ R_B $，那么什么问题都不在话下🤓。 思路及实现&emsp;&emsp;&ensp;先给出我的代码，很简单，都是基础的Python，稍微难懂的都加了注释，所以这里就只提个思路就好。由于笔者刚接触Python没多久，所以很多地方都没有优化，写的不好请见谅😉。哦哦，至于老师发给我的那些观测数据，因为老师说那是机密文件🤔，所以我就不上传了吧😂。 数据处理&emsp;&emsp;&ensp;首先，我们要将这些堆杂在一起的文档按日期进行整合，即把属于一天的所有数据合并到一个文件中，形成这样的一种形式&emsp;&emsp;&ensp;实现起来很简单，我代码中的CombFile( )函数就实现了该功能，后来，老师给我说当时给我的文件是特殊情况🌚，以后需要处理的数据如下面这种样式，即已经按日期分类好，但没有进行整合&emsp;&emsp;&ensp;没事，那样更简单，我的CombFile02( )就实现了整合的功能。整合得到当天的testdata之后，那么一切都变得简单了，函数GetR( )将数据进行划分，得到当天所有的$ R_S $、$R_N$和$ R_B $数据，函数calS0( )再根据$ S $和$ S_0 $之间的公式关系，以及官网查得的数据$ S $，即可计算得出当天的$ S_0 $，计算出多天的$S_0$，我们这里就简单地去个平均，作为我们的最佳修正系数，之后，再用函数PredictS( )，也就是calS0( )的逆过程，把最佳修正系数作为当天的$ S_0 $，就可以预测出当天的$ S $，可以和官网公布的数据进行比较，看看误差，当然，由于训练样本太小，仅仅采用取平均的方法，误差肯定有些偏大🌚，没事……笔者不在乎，重在体验😂。&emsp;&emsp;&ensp;哇，到这里数据处理部分就这么结束了？可见这个项目是有多简单🌝，我还在这里兴致勃勃地长篇大论……好了，下面就剩下用户界面和生成一个可执行文件了。 用户界面&emsp;&emsp;&ensp;这里主要用的Python自带的tkinter库，在制图方面很有用，有兴趣的朋友可以自己学习一个。我们这里用到的就很简单了，一个Button产生按钮，filedialog用作显示对话框，提示用户打开文件夹，最后再用messagebox来显示计算结果就OK了。我们运行一下看看是什么样子&emsp;&emsp;&ensp;可以看到出现了一个对话框，然后我们点击对话框中的按钮，就可以进行选择文件夹了&emsp;&emsp;&ensp;随意选取一个文件夹，就可以计算出结果啦！&emsp;&emsp;&ensp;结果是多少不重要，反正是实现了任务要求了🤓。好了一个简单的项目到此就基本结束了，下面就来生成一个可执行的文件，可以用于其他没有安装Python及相关库的上位机中。 生成可执行文件Mac OS系统&emsp;&emsp;&ensp;这一块我是实在不想写的……捣鼓了那么久最后也没捣鼓出来，主要用到的是py2app，看了很多博客、论坛，都是大同小异，可以根据这篇操作一波，当然里面是没有涉及到遇到的各种bug的，如果你能一帆风顺地完成，emmm那么就很简单了😂。期间我遇到了各种奇葩的bug，不知道是环境还是啥问题，找了小伙伴来也没能解决，最后自己一顿骚操作，居然生成了一个APP，把我激动地半天，我还给这个APP加了一个图标，附加了其他相关信息&emsp;&emsp;&ensp;最后发现这玩意只能在我的Mac上运行，在其他的Mac上就GG了🌚，不管了，放弃了，我就是这么懒🙃。&emsp;&emsp;&ensp;有兴趣的小伙伴可以跟着教程操作一波，简书里的这篇文章写的就很详细了，介绍了如何添加图标，加入版本，版权等信息。另外推荐一个网站，里面有很多有趣的图标可供选择。 Windows系统&emsp;&emsp;&ensp;在Mac OS系统下倒腾失败后，我又开始倒腾Windows……查阅相关介绍后，发现在Windows下有两种生成方式，一个就是和py2app很像的py2exe了……网上介绍很简单，但是有心理阴影的我又没搞出来🙃，后来发现py2exe已经十多年没更新了……出各种bug可能也是难免的吧。所以当然就要推荐第二种方法了——pyinstalller，真的是简单又方便，同样，这里也包含了很多命令可以添加图标之类的各种信息。当然，要想把图标做的更完美，还是需要修改一些文件内容的，可以综合参考一下这篇文章和这一篇，最终，我终于生成了一个exe&emsp;&emsp;&ensp;第一张图是文件存放在桌面或者文件夹中的显示图标。第二张图是运行之后的对话窗口，同样具有按钮，细心的小伙伴还会发现在对话窗口的左上角还有一个小太阳，没错，这就是完善图标后的效果，对应的就是第三张图在任务栏中显示的图标，同样也是一个小太阳。于是在Windows下的可执行文件就生成啦。&emsp;&emsp;&ensp;在其他上位机测试过也可以执行，终于完事了……天呐，我实在太菜了，捣鼓了这么久才弄出来🌚，没事，重在折腾…… 后记&emsp;&emsp;&ensp;把可执行文件发给老师之后也就算完成任务了，闲下来的我花了点时间学了点GitHUb，又搭了一个HEXO博客，然后写下了这篇废话连篇的博客。这篇博客断断续续竟然写了两天，真的敬佩那些坚持每周一更的大牛们，而且还是高质量的文章，自己也不晓得能不能坚持……emmm，继续努力吧😂，未来的路还很长，道阻且长，行则将至，共勉。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FirstBlog]]></title>
    <url>%2F2018%2F11%2F13%2FFirstBlog%2F</url>
    <content type="text"><![CDATA[&emsp;哈哈哈，终于把HEXO搭建好啦！！！👏👏👏&emsp;这两天学习了一下Markdown，GitHub的基本操作，并搭建好了HEXO，过会再学习一下HEXO的使用。😉&emsp;几天主要跟着从0开始学习GitHub系列学习的是这篇文章，作者张帅写的很好呐，受益匪浅，作为一个即将毕业的大四🐶，感觉真的是相见恨晚呐。文章写的这么好，想必人一定很帅吧（手动狗头）哈哈哈。&emsp;先说这么多，明早还要早起上一周里唯一的一节课，哈哈，身为大四🐶唯一早起的理由了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Chat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F11%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Chat</tag>
      </tags>
  </entry>
</search>
